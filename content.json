[{"title":"git学习","date":"2017-07-12T06:26:03.000Z","path":"2017/07/12/git学习/","text":"非git 的命令 [mkdir 文件名] 创建一个文件夹 [cd] 进入一个文件夹 [cat] 查看文件内容 [pwd] 查看当前路径 [rm] 删除文件 [rmdir] 删除空的文件夹 git 的命令初始化 [$ git init] 初始化一个git仓库1.常用命令 [$ git status] 显示所有文件的状态 [$ git add 文件名] 把文件加到暂存区 [$ git commit -m “描述”] 把暂存区的内容提交 [$ git diff 文件名] 只会显示工作区文件内容的改变,如果加到暂存区了,就不会显示内容了 [$ git log] 显示文件的提交日志 [$ git log –pretty=oneline] 在一行里显示文件的提交日志 [$ git reflog] 显示当前仓库的提交和回退操作指令日志 [$ git log –graph –pretty=oneline –abbrev-commit] 看提交的结构2.版本回退 [$ git reset –hard HEAD^] 版本回退到上一个版本 [$ git reset –hard HEAD~n] 版本回退到第前n个版本 [$ git reset –hard 版本commit id] 版本回退到指定的commit id号对应的版本 [$ git checkout – ] (注意:–很重要,必加.否则就成了改变分支)把工作区的文件内容修改全部取消,回退到最近的commit|add状态 [$ git reset &lt;文件名&gt;] 把暂存区的指定的修改给移除 [$ git rm ] 删除版本库里的文件,并且会把工作区的文件也删除3.与远程库建立连接 [$ git remote add &lt;自定义远程库名&gt; git@github.com:用户名/库名.git] 创建一个远程库连接点 [$ git remote add &lt;自定义远程库名&gt; https://github.com/用户名/库名.git] 创建一个远程库连接点,但每次都需要输账号密码 [$ git remote -v] 显示较详细远程信息 [$ git remote] 显示简短的远程信息4.推送到远程库 [$ git push -u &lt;自定义远程库名&gt; 远程库的分支名] 把修改提交到远程服务器,第一次加一个-u参数 [$ git push &lt;自定义远程库名&gt; 远程库的分支名] 把修改提交到远程服务器的对应分支5.从远程库拉取 [$ git pull –rebase &lt;自定义的远程库名&gt; &lt;分支名&gt;] 从远程库里拉取内容 [$ git pull] 在已建立流桥梁的情况下,可以拉取远程的最新库6.从远程库克隆 [$ git clone git@github.com:用户名/库名.git] 从远程库克隆7.分支操作 [$ git branch] 查看所有分支,当前分支前有一个*号 [$ git branch &lt;分支名&gt;] 创建一个新的分支 [$ git branch -d &lt;分支名&gt;] 删除一个分支 [$ git branch -D &lt;分支名&gt;] 强制删除分支 [$ git branch –set-upstream 当前分支名 origin/&lt;远程分支名&gt;] 在当前分支和远程分支之间建立一个流桥梁 [$ git checkout &lt;分支名&gt;] 转换分支,就是转换HEAD指针的指向 [$ git checkout -b &lt;分支名&gt;] 创建一个新的分支并指向此分支 [$ git merge &lt;分支名&gt;] 在当前HEAD指向的分支里合并指定分支 [$ git merge –no-ff -m “描述” &lt;分支名&gt;] 融合分支但是不是快进模式,就是说显示分支的结构8.工作环境的存储与回复 [$ git stash] 会把当前的工作环境存储起来 [$ git stash list] 查看已经存储的环境 [$ git stash apply &lt;存储的工作环境序号&gt;] 会把指定的工作环境恢复,同时还会比较冲突,但不会删除序号 [$ git stash pop &lt;存储的工作环境序号&gt;] 会把指定的工作环境恢复,同时还会比较冲突,同时删除序号 9.tag标签定义版本 [$ git tag &lt;默认commit是HEAD&gt;] 在当前最近的一次提交下建立一个标签 [$ git tag commitId] 在指定的提交位置建立一个标签 [$ git tag -a -m “描述” commitId] 在指定的提交位置建立一个标签,并加上描述信息和名字 [$ git tag -s -m “描述” commitId] 在指定的提交位置建立一个标签,并加上描述信息和名字,但是用PGP签名标签 [$ git tag] 查看所有tag信息 [git show ] 查看指定tag信息 [$ git push origin ] 把指定标签推送到远程 [$ git push origin –tags] 把未提交的标签全部推送到远程 [$ git tag -d ] 删除标签 [$ git push origin :refs/tags/] 在远程删除一个标签,注:必须先在本地删除标签 [$ git add -f &lt;文件名&gt;] 强行加入一个被忽视的文件到暂存区10.自定义git(原来的仍然可用) [$ git config –global alias.&lt;指令的代替名&gt; 被代替的指令] 简化一个指令,相当于加了一个快捷键,原来的依然能用 [$ git config –global color.ui true] 让git显示颜色 [$ git config –global alias.st status] 将status配置出另一名字st[$git st] [$ git config –global alias.co checkout] 将checkout配置出另一名字co[$git co] [$ git config –global alias.ci commit] 将commit配置出另一名字ci[$git ci] [$ git config –global alias.br branch] 将branch配置出另一名字br[$git br] [$ git config –global alias.last ‘log -1’] 为最后一次提交配置 last[$git last] [git config –global alias.lg “log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”] 丧心病狂…[$git lg] 配置的别名在C:\\Users\\Administrator\\.gitconfig中可查看(win7) 忽视文件需要: 1.在工作区根路径下创建一个.gitignore的文件,内容是要忽略的文件特征(后缀) 2.提交到版本库中 本文的[…]无特殊含义,只是为了美观","raw":"---\nlayout: post\ntitle: git学习\ndate: 2017-07-12 14:26:03\ncomments: true\ntags: \n\t- 笔记 \n    - git\n---\n\n## 非git 的命令\n- [mkdir 文件名]      创建一个文件夹\n- [cd]    \t\t\t 进入一个文件夹\n- [cat] \t\t\t\t查看文件内容\n- [pwd]\t\t\t\t查看当前路径\n- [rm]\t\t\t\t删除文件<br/>\n<!--more-->\n- [rmdir]\t\t\t\t删除空的文件夹\n\n## git 的命令\n### 初始化\n- [$ git init] \t\t\t\t初始化一个git仓库\n### 1.常用命令\n- [$ git status]\t\t\t\t显示所有文件的状态\n- [$ git add  文件名]      \t把文件加到暂存区\n- [$ git commit -m \"描述\"]   \t把暂存区的内容提交\n- [$ git diff 文件名]\t\t\t只会显示工作区文件内容的改变,如果加到暂存区了,就不会显示内容了\n- [$ git log]\t\t\t\t\t显示文件的提交日志\n- [$ git log --pretty=oneline]\t在一行里显示文件的提交日志\n- [$ git reflog]\t\t\t\t\t\t显示当前仓库的提交和回退操作指令日志\n- [$ git log --graph --pretty=oneline --abbrev-commit]\t\t\t看提交的结构\n### 2.版本回退\n- [$ git reset --hard HEAD^]\t\t版本回退到上一个版本\n- [$ git reset --hard HEAD~n]\t\t版本回退到第前n个版本\n- [$ git reset --hard 版本commit id]\t版本回退到指定的commit id号对应的版本\n- [$ git checkout -- <file>] \t\t\t(注意:--很重要,必加.否则就成了改变分支)把工作区的文件内容修改全部取消,回退到最近的commit|add状态\n- [$ git reset <HEAD|HEAD^|HEAD~n> <文件名>] \t\t把暂存区的指定的修改给移除\n- [$ git rm <file>]\t\t\t\t\t\t\t\t删除版本库里的文件,并且会把工作区的文件也删除\n### 3.与远程库建立连接\n- [$ git remote add <自定义远程库名> git@github.com:用户名/库名.git]\t\t创建一个远程库连接点\n- [$ git remote add <自定义远程库名> https://github.com/用户名/库名.git]\t创建一个远程库连接点,但每次都需要输账号密码\n- [$ git remote -v]\t\t\t\t\t\t\t\t显示较详细远程信息\n- [$ git remote]\t\t\t\t\t\t\t\t\t显示简短的远程信息\n### 4.推送到远程库\n- [$ git push -u <自定义远程库名> 远程库的分支名]\t\t\t\t\t\t\t\t\t把修改提交到远程服务器,第一次加一个-u参数\n- [$ git push <自定义远程库名> 远程库的分支名]\t\t\t\t\t\t\t\t\t把修改提交到远程服务器的对应分支\n### 5.从远程库拉取\n- [$ git pull --rebase <自定义的远程库名> <分支名>]\t\t\t\t\t\t从远程库里拉取内容\n- [$ git pull]\t\t\t\t\t\t\t在已建立流桥梁的情况下,可以拉取远程的最新库\n### 6.从远程库克隆\n- [$ git clone git@github.com:用户名/库名.git]\t\t\t\t\t\t\t从远程库克隆\n### 7.分支操作\n- [$ git branch]\t\t\t\t\t\t\t\t查看所有分支,当前分支前有一个*号\n- [$ git branch <分支名>]\t\t\t\t\t\t创建一个新的分支\t\t\t\t\t\n- [$ git branch -d <分支名>]\t\t\t\t\t删除一个分支\n- [$ git branch -D <分支名>]\t\t\t\t\t\t强制删除分支\n- [$ git branch --set-upstream 当前分支名 origin/<远程分支名>]\t\t在当前分支和远程分支之间建立一个流桥梁\n- [$ git checkout <分支名>]\t\t\t\t\t转换分支,就是转换HEAD指针的指向\n- [$ git checkout -b <分支名>]\t\t\t\t创建一个新的分支并指向此分支\n- [$ git merge <分支名>]\t\t\t\t\t\t在当前HEAD指向的分支里合并指定分支\n- [$ git merge --no-ff -m \"描述\" <分支名>]\t\t\t\t\t\t融合分支但是不是快进模式,就是说显示分支的结构\n### 8.工作环境的存储与回复\n- [$ git stash]\t\t\t\t\t\t\t\t\t\t\t\t\t会把当前的工作环境存储起来\n- [$ git stash list]\t\t\t\t\t\t\t\t\t\t\t\t查看已经存储的环境\n- [$ git stash apply <存储的工作环境序号>]\t\t\t\t\t\t会把指定的工作环境恢复,同时还会比较冲突,但不会删除序号\n- [$ git stash pop <存储的工作环境序号>]\t\t\t\t\t\t\t会把指定的工作环境恢复,同时还会比较冲突,同时删除序号\t\t\t\t\t\t\n### 9.tag标签定义版本\t\t\t\t\t\n- [$ git tag <tag名> <默认commit是HEAD>]\t\t\t在当前最近的一次提交下建立一个标签\n- [$ git tag <tag名> commitId]\t\t\t\t\t在指定的提交位置建立一个标签\n- [$ git tag -a <tag名> -m \"描述\" commitId]\t\t在指定的提交位置建立一个标签,并加上描述信息和名字\n- [$ git tag -s <tag名> -m \"描述\" commitId]\t\t在指定的提交位置建立一个标签,并加上描述信息和名字,但是用PGP签名标签\n- [$ git tag]                       查看所有tag信息\n- [git show <tagname>]\t\t\t\t查看指定tag信息\n- [$ git push origin <tag名>]\t\t\t\t\t\t把指定标签推送到远程\n- [$ git push origin --tags]\t\t\t\t\t\t把未提交的标签全部推送到远程\n- [$ git tag -d <tag名>]\t\t\t\t\t\t\t删除标签\n- [$ git push origin :refs/tags/<tag名>]\t\t\t在远程删除一个标签,注:必须先在本地删除标签\n- [$ git add -f <文件名>]\t\t\t\t\t\t\t强行加入一个被忽视的文件到暂存区\n### 10.自定义git(原来的仍然可用)\n- [$ git config --global alias.<指令的代替名> 被代替的指令] \t简化一个指令,相当于加了一个快捷键,原来的依然能用\n- [$ git config --global color.ui true]  让git显示颜色\n- [$ git config --global alias.st status] 将status配置出另一名字st[$git st] \n- [$ git config --global alias.co checkout] 将checkout配置出另一名字co[$git co]\n- [$ git config --global alias.ci commit] 将commit配置出另一名字ci[$git ci]\n- [$ git config --global alias.br branch] 将branch配置出另一名字br[$git br]\n- [$ git config --global alias.last 'log -1'] 为最后一次提交配置 last[$git last]\n- [git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"] 丧心病狂...[$git lg]\n- 配置的别名在C:\\Users\\Administrator\\\\.gitconfig中可查看(win7)\n\n## 忽视文件需要:\n- 1.在工作区根路径下创建一个.gitignore的文件,内容是要忽略的文件特征(后缀)\n- 2.提交到版本库中\n\n## 本文的[...]无特殊含义,只是为了美观","content":"<h2 id=\"非git-的命令\"><a href=\"#非git-的命令\" class=\"headerlink\" title=\"非git 的命令\"></a>非git 的命令</h2><ul>\n<li>[mkdir 文件名]      创建一个文件夹</li>\n<li>[cd]                 进入一个文件夹</li>\n<li>[cat]                 查看文件内容</li>\n<li>[pwd]                查看当前路径</li>\n<li>[rm]                删除文件<br><a id=\"more\"></a></li>\n<li>[rmdir]                删除空的文件夹</li>\n</ul>\n<h2 id=\"git-的命令\"><a href=\"#git-的命令\" class=\"headerlink\" title=\"git 的命令\"></a>git 的命令</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>[$ git init]                 初始化一个git仓库<h3 id=\"1-常用命令\"><a href=\"#1-常用命令\" class=\"headerlink\" title=\"1.常用命令\"></a>1.常用命令</h3></li>\n<li>[$ git status]                显示所有文件的状态</li>\n<li>[$ git add  文件名]          把文件加到暂存区</li>\n<li>[$ git commit -m “描述”]       把暂存区的内容提交</li>\n<li>[$ git diff 文件名]            只会显示工作区文件内容的改变,如果加到暂存区了,就不会显示内容了</li>\n<li>[$ git log]                    显示文件的提交日志</li>\n<li>[$ git log –pretty=oneline]    在一行里显示文件的提交日志</li>\n<li>[$ git reflog]                        显示当前仓库的提交和回退操作指令日志</li>\n<li>[$ git log –graph –pretty=oneline –abbrev-commit]            看提交的结构<h3 id=\"2-版本回退\"><a href=\"#2-版本回退\" class=\"headerlink\" title=\"2.版本回退\"></a>2.版本回退</h3></li>\n<li>[$ git reset –hard HEAD^]        版本回退到上一个版本</li>\n<li>[$ git reset –hard HEAD~n]        版本回退到第前n个版本</li>\n<li>[$ git reset –hard 版本commit id]    版本回退到指定的commit id号对应的版本</li>\n<li>[$ git checkout – <file>]             (注意:–很重要,必加.否则就成了改变分支)把工作区的文件内容修改全部取消,回退到最近的commit|add状态</file></li>\n<li>[$ git reset <head|head^|head~n> &lt;文件名&gt;]         把暂存区的指定的修改给移除</head|head^|head~n></li>\n<li>[$ git rm <file>]                                删除版本库里的文件,并且会把工作区的文件也删除<h3 id=\"3-与远程库建立连接\"><a href=\"#3-与远程库建立连接\" class=\"headerlink\" title=\"3.与远程库建立连接\"></a>3.与远程库建立连接</h3></file></li>\n<li>[$ git remote add &lt;自定义远程库名&gt; git@github.com:用户名/库名.git]        创建一个远程库连接点</li>\n<li>[$ git remote add &lt;自定义远程库名&gt; <a href=\"https://github.com/用户名/库名.git\" target=\"_blank\" rel=\"external\">https://github.com/用户名/库名.git</a>]    创建一个远程库连接点,但每次都需要输账号密码</li>\n<li>[$ git remote -v]                                显示较详细远程信息</li>\n<li>[$ git remote]                                    显示简短的远程信息<h3 id=\"4-推送到远程库\"><a href=\"#4-推送到远程库\" class=\"headerlink\" title=\"4.推送到远程库\"></a>4.推送到远程库</h3></li>\n<li>[$ git push -u &lt;自定义远程库名&gt; 远程库的分支名]                                    把修改提交到远程服务器,第一次加一个-u参数</li>\n<li>[$ git push &lt;自定义远程库名&gt; 远程库的分支名]                                    把修改提交到远程服务器的对应分支<h3 id=\"5-从远程库拉取\"><a href=\"#5-从远程库拉取\" class=\"headerlink\" title=\"5.从远程库拉取\"></a>5.从远程库拉取</h3></li>\n<li>[$ git pull –rebase &lt;自定义的远程库名&gt; &lt;分支名&gt;]                        从远程库里拉取内容</li>\n<li>[$ git pull]                            在已建立流桥梁的情况下,可以拉取远程的最新库<h3 id=\"6-从远程库克隆\"><a href=\"#6-从远程库克隆\" class=\"headerlink\" title=\"6.从远程库克隆\"></a>6.从远程库克隆</h3></li>\n<li>[$ git clone git@github.com:用户名/库名.git]                            从远程库克隆<h3 id=\"7-分支操作\"><a href=\"#7-分支操作\" class=\"headerlink\" title=\"7.分支操作\"></a>7.分支操作</h3></li>\n<li>[$ git branch]                                查看所有分支,当前分支前有一个*号</li>\n<li>[$ git branch &lt;分支名&gt;]                        创建一个新的分支                    </li>\n<li>[$ git branch -d &lt;分支名&gt;]                    删除一个分支</li>\n<li>[$ git branch -D &lt;分支名&gt;]                        强制删除分支</li>\n<li>[$ git branch –set-upstream 当前分支名 origin/&lt;远程分支名&gt;]        在当前分支和远程分支之间建立一个流桥梁</li>\n<li>[$ git checkout &lt;分支名&gt;]                    转换分支,就是转换HEAD指针的指向</li>\n<li>[$ git checkout -b &lt;分支名&gt;]                创建一个新的分支并指向此分支</li>\n<li>[$ git merge &lt;分支名&gt;]                        在当前HEAD指向的分支里合并指定分支</li>\n<li>[$ git merge –no-ff -m “描述” &lt;分支名&gt;]                        融合分支但是不是快进模式,就是说显示分支的结构<h3 id=\"8-工作环境的存储与回复\"><a href=\"#8-工作环境的存储与回复\" class=\"headerlink\" title=\"8.工作环境的存储与回复\"></a>8.工作环境的存储与回复</h3></li>\n<li>[$ git stash]                                                    会把当前的工作环境存储起来</li>\n<li>[$ git stash list]                                                查看已经存储的环境</li>\n<li>[$ git stash apply &lt;存储的工作环境序号&gt;]                        会把指定的工作环境恢复,同时还会比较冲突,但不会删除序号</li>\n<li>[$ git stash pop &lt;存储的工作环境序号&gt;]                            会把指定的工作环境恢复,同时还会比较冲突,同时删除序号                        <h3 id=\"9-tag标签定义版本\"><a href=\"#9-tag标签定义版本\" class=\"headerlink\" title=\"9.tag标签定义版本\"></a>9.tag标签定义版本</h3></li>\n<li>[$ git tag <tag名> &lt;默认commit是HEAD&gt;]            在当前最近的一次提交下建立一个标签</tag名></li>\n<li>[$ git tag <tag名> commitId]                    在指定的提交位置建立一个标签</tag名></li>\n<li>[$ git tag -a <tag名> -m “描述” commitId]        在指定的提交位置建立一个标签,并加上描述信息和名字</tag名></li>\n<li>[$ git tag -s <tag名> -m “描述” commitId]        在指定的提交位置建立一个标签,并加上描述信息和名字,但是用PGP签名标签</tag名></li>\n<li>[$ git tag]                       查看所有tag信息</li>\n<li>[git show <tagname>]                查看指定tag信息</tagname></li>\n<li>[$ git push origin <tag名>]                        把指定标签推送到远程</tag名></li>\n<li>[$ git push origin –tags]                        把未提交的标签全部推送到远程</li>\n<li>[$ git tag -d <tag名>]                            删除标签</tag名></li>\n<li>[$ git push origin :refs/tags/<tag名>]            在远程删除一个标签,注:必须先在本地删除标签</tag名></li>\n<li>[$ git add -f &lt;文件名&gt;]                            强行加入一个被忽视的文件到暂存区<h3 id=\"10-自定义git-原来的仍然可用\"><a href=\"#10-自定义git-原来的仍然可用\" class=\"headerlink\" title=\"10.自定义git(原来的仍然可用)\"></a>10.自定义git(原来的仍然可用)</h3></li>\n<li>[$ git config –global alias.&lt;指令的代替名&gt; 被代替的指令]     简化一个指令,相当于加了一个快捷键,原来的依然能用</li>\n<li>[$ git config –global color.ui true]  让git显示颜色</li>\n<li>[$ git config –global alias.st status] 将status配置出另一名字st[$git st] </li>\n<li>[$ git config –global alias.co checkout] 将checkout配置出另一名字co[$git co]</li>\n<li>[$ git config –global alias.ci commit] 将commit配置出另一名字ci[$git ci]</li>\n<li>[$ git config –global alias.br branch] 将branch配置出另一名字br[$git br]</li>\n<li>[$ git config –global alias.last ‘log -1’] 为最后一次提交配置 last[$git last]</li>\n<li>[git config –global alias.lg “log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”] 丧心病狂…[$git lg]</li>\n<li>配置的别名在C:\\Users\\Administrator\\.gitconfig中可查看(win7)</li>\n</ul>\n<h2 id=\"忽视文件需要\"><a href=\"#忽视文件需要\" class=\"headerlink\" title=\"忽视文件需要:\"></a>忽视文件需要:</h2><ul>\n<li>1.在工作区根路径下创建一个.gitignore的文件,内容是要忽略的文件特征(后缀)</li>\n<li>2.提交到版本库中</li>\n</ul>\n<h2 id=\"本文的-…-无特殊含义-只是为了美观\"><a href=\"#本文的-…-无特殊含义-只是为了美观\" class=\"headerlink\" title=\"本文的[…]无特殊含义,只是为了美观\"></a>本文的[…]无特殊含义,只是为了美观</h2>","slug":"git学习","updated":"2017-07-12T07:03:32.564Z","comments":true,"link":"","permalink":"http://yoursite.com/2017/07/12/git学习/","excerpt":"非git 的命令 [mkdir 文件名] 创建一个文件夹 [cd] 进入一个文件夹 [cat] 查看文件内容 [pwd] 查看当前路径 [rm] 删除文件","categories":[],"tags":[{"name":"笔记 - git","slug":"笔记-git","permalink":"http://yoursite.com/tags/笔记-git/"}]},{"title":"css记录","date":"2017-07-12T02:58:14.000Z","path":"2017/07/12/css记录/","text":"基本 &lt;hr /&gt; 添加一个分割横线 &lt;pre&gt; 添加预格式化的文本,如代码 &lt;code&gt; 一行 &lt;br /&gt; 换行 &lt;hx&gt;(x=1,2,3,4,5,6) 文本标题 &lt;q&gt; 短文本引用 &lt;blockquote&gt; 长文本引用 &lt;address&gt; 地址(强调) &amp;nbsp; 空格 &lt;p&gt; 段落 &lt;ul&gt; &lt;li&gt; 无序信息队列 &lt;ol&gt; &lt;li&gt; 有序信息队列 &lt;div id=&#39;&#39;xxx&#39;&#39;&gt; div相当于一个小隔间,一块小区域表格专属 &lt;caption&gt; 为表格添加标题 &lt;table summary=&quot;摘要(不会显示在前台)&quot;&gt;&lt;/table&gt; 代表一个表格 &lt;tbody&gt;&lt;/tbody&gt; 加了的话就会导致整个表格全加载才显示 &lt;tr&gt;&lt;/tr&gt;代表一行,有多少行就有多少对 &lt;th&gt;&lt;/th&gt; 表头的一个单元格 &lt;td&gt;&lt;/td&gt; 代表内容的一个单元格超链接 &lt;a href=&quot;目标网址&quot; title=&quot;鼠标滑过显示的内容&quot; target=&quot;打开的方式&quot;&gt; 超链接标签 &lt;a href=&quot;mailto:yy@imooc.com ?cc=抄送地址&amp;bcc=密件抄送地址&amp;subject=主题名&amp;body=邮件内容&quot;&gt; 超链接名&lt;/a&gt;(允许发送多人,用’;’间隔即可)图片 &lt;img src=&quot;目标图片的所在地址&quot; alt=&quot;图片加载失败是显示的文本&quot; title=&quot;鼠标滑过时的提示文本&quot;&gt; 图片标签表单 &lt;form method=&quot;提交方式get/post&quot; action=&quot;提交服务器地址&quot;&gt; 表单是用于交互的,内可以有多种标签. &lt;input type=&quot;text/password&quot; name=&quot;用于后端识别&quot; value=&quot;默认文本值&quot;/&gt; 输入文本标签 &lt;textarea rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;默认值&lt;/textarea&gt; 大段文本输入域,就是一个大的输入框而已 &lt;input type=&quot;radio/checkbox&quot; name=&quot;用于后台,若是单选,则name要相同&quot; value=&quot;返回给后台的值&quot; checked=&quot;checked(代表初始默认选中)/默认的不选&quot;/&gt; 单选框及多选框浏览器的下拉列表框实现 &lt;select multiple=&quot;multiple(代表可以按下ctrl+单击来多选)&quot;&gt; &lt;option value=&quot;提交给服务器的值&quot;&gt; 显示的内容- &lt;/option&gt;…. &lt;option value=&quot;提交给服务器的值&quot; selected=&quot;selected&quot;(设置为默认值)&gt;显示的内容&lt;/option&gt; &lt;/select&gt; 两个按钮1.提交 &lt;input type=&quot;submit&quot; value=&quot;显示的内容(因为此按钮的作用是把上述的内容提交给服务器,就是起到一个确定的意思而已,所以值等于显示的内容即可)&quot; name=&quot;后台识别&quot;/&gt;2.重置 &lt;input type=&quot;reset&quot; value=&quot;显示的内容(因为此按钮的作用是重置上述的表单内容&quot; name=&quot;后台识别&quot;/&gt; label标签 &lt;label for=&quot;所关联控件的id值&quot;&gt;显示的内容&lt;/label&gt;每个表单都有个id,用于前端自己来识别的. CSS开始内联式 &lt;xx style=&quot;语句&quot;&gt;&lt;/xx&gt; 嵌入式(一般在&lt;head&gt;标签的域内) &lt;style type=&quot;text/css&quot;&gt;xx{ ... }&lt;/style&gt;外部式(写在&lt;head&gt;标签的域内的&lt;link&gt;标签中) &lt;link href=&quot;目标css文件&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;进入大选择器时代标签选择器 标签名{ …}类选择器 1.先创建一个css的类选择器(以’.’开头).起名{ …} 2.在标签中使用例:&lt;span class=&quot;起的名字&quot;&gt;示例&lt;/span&gt;ID选择器 1.创建一个ID选择器# 目标ID名{ ... } 2.使用例:&lt;span id=&quot;目标ID名&quot;&gt;示例&lt;/span&gt;类和ID选择器的区别 1.ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。 2.可以使用类选择器词列表方法为一个元素同时设置多个样式。不能使用 ID 词列表(例:&lt;span class=&quot;stress setBig&quot;&gt; 这是对的,但是&lt;span id=&quot;stressId setBigId&quot;&gt; 这是错的)子选择器 1.创建子选择器. 父名(随意起名,也可以是一个标签) &gt; 子标签名{ …} 2.使用例:&lt;p class=&quot;父名(类似于类选择器的扩展)&quot;&gt;&lt;span&gt;子&lt;span&gt;孙类&lt;/span&gt; 类&lt;/span&gt;&lt;span&gt;子类&lt;/span&gt; 3.注意只会作用于直接子类,孙子级或更深则不作用.包含选择器(基本类似于子选择器,注意空格区别)(我认为可以理解为强化版的子选择器) 1.创建包含选择器. 父类名 ‘空格’ 子标签名{ …} 2.使用与子选择器类似,仅有一点区别:父类的所有子孙级全受到CSS效果的作用.通用选择器 作用:会匹配所有的html的标签. 格式*{xx}伪类选择符 格式标签名:对标签的行为操作{CSS样式...;} 注意(目前只有下面的实例的兼容性最好,伪类选择符有很多…)例:a:hover{ color:red; ... }分组选择符 例1:h1,span{CSS样式...}相当于h1{xx} span{xx} 例2:.first,#second{}继承 例:p{xxx}&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt; 特殊性(权值优先级问题)(当对同一内容做相同类型操作是就会涉及到权值比较) ID选择符(最高100) &gt; 类选择符(10) &gt; 标签(1) &gt; 继承(0.1) 层叠(相同权值,相同类型)1.后 &gt; 前 (前面的被后面所覆盖)2.内联式 &gt; 入式 &gt; 外部式重要性(为低权值设置成高权值) 格式:!important 例:p{ color:red !important; } p{ color:blue; }显示的是红色.盒子模型盒子的边界(border)p{ border:宽度 样式 颜色; }p{ border-width:thin/medium/thick/像素; border-style:dashed/dotted/solid; border-color:十六进制/英文; }盒子的真实宽度/高度真实宽度: margin-left + border-left + padding-left + width + padding-right + border-right + margin-right真实高度 类似于真实宽度算法盒子的填充 1.顺时针 上 右 下 左p{ padding:20px 10px 15px 30px; } 2.设置上下 左右p{ padding:20px 30px; } 3.若果四个方向都一样p{ padding:10px; } 4.(left=right)p{ padding:10px 20px 30px } 5.全写p{ padding-top:; xxx; ... }盒子的边界(margin) 类似于盒子的填充写法CSS布局模型流动型(Flow)浏览器默认布局:1.块级元素独占一行2.内联元素从左到右浮动型(Float)适用于想让块级元素在同行显示的时候 设置:float:left/right;层模型(Layer)三个定位属性: position:absolute(绝对定位)/relative(相对定位)/fixed(固定定位) 1.绝对定位这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。 2.相对定位这条语句是在原来的位置上进行相对的移动,并且旧位置依然保留,其后的元素标签都不会迁移. 3.固定定位相对于视图,拖动滚动条位置不会改变.类似于网页上的小浮窗绝对,相对定位结合(据父定子) 1.参照定位必须是目标定位的父辈 2.参照的父级必须是 position:relative; 3.子级的定位必须是 position:absolute; (top:xx; xxxx;)长度单位当给 font-size 设置单位为 em (%同理)时，此时计算的标准以 p 的父元素的 font-size 为基础。如下…：&lt;p&gt;以这个&lt;span&gt;例子&lt;/span&gt;为例。&lt;/p&gt;p{font-size:14px}span{font-size:0.8em;}结果 span 中的字体“例子”字体大小就为 11.2px（14 * 0.8 = 11.2px）。","raw":"---\nlayout: post\ntitle: css记录\ndate: 2017-07-12 10:58:14\ncomments: true\ntags: \n\t- 笔记 \n\t- css\n---\n\n## 基本\n- `<hr />` 添加一个分割横线\n- `<pre>` 添加预格式化的文本,如代码\n- `<code>` 一行\n- `<br />` 换行\n- `<hx>`(x=1,2,3,4,5,6) 文本标题\n\n<!--more-->\n- `<q>` 短文本引用\n- `<blockquote>` 长文本引用\n- `<address>`  地址(强调)\n- `&nbsp;`  空格\n- `<p>` 段落\n- `<ul>` `<li>`  无序信息队列\n- `<ol>` `<li>`  有序信息队列\n- `<div  id=''xxx''>`  div相当于一个小隔间,一块小区域\n## 表格专属\n- `<caption>`  为表格添加标题\n- `<table   summary=\"摘要(不会显示在前台)\"></table>` 代表一个表格\n- `<tbody></tbody>` 加了的话就会导致整个表格全加载才显示\n- `<tr></tr>`代表一行,有多少行就有多少对\n- `<th></th>`  表头的一个单元格\n- `<td></td>` 代表内容的一个单元格\n## 超链接\n- `<a href=\"目标网址\" title=\"鼠标滑过显示的内容\" target=\"打开的方式\">`  超链接标签\n- `<a href=\"mailto:yy@imooc.com ?cc=抄送地址&bcc=密件抄送地址&subject=主题名&body=邮件内容\">` 超链接名`</a>`(允许发送多人,用';'间隔即可)\n## 图片\n- `<img src=\"目标图片的所在地址\" alt=\"图片加载失败是显示的文本\" title=\"鼠标滑过时的提示文本\">`     图片标签\n## 表单\n- `<form method=\"提交方式get/post\" action=\"提交服务器地址\">`    表单是用于交互的,内可以有多种标签.\n- `<input type=\"text/password\" name=\"用于后端识别\" value=\"默认文本值\"/>`          输入文本标签\n- `<textarea rows=\"行数\" cols=\"列数\">`默认值`</textarea>`  大段文本输入域,就是一个大的输入框而已\n- `<input type=\"radio/checkbox\" name=\"用于后台,若是单选,则name要相同\" value=\"返回给后台的值\" checked=\"checked(代表初始默认选中)/默认的不选\"/>`    单选框及多选框\n### 浏览器的下拉列表框实现\n- `<select  multiple=\"multiple(代表可以按下ctrl+单击来多选)\">`\n\t- `<option value=\"提交给服务器的值\">` 显示的内容- `</option>`\n\t....\n\t- `<option value=\"提交给服务器的值\"  selected=\"selected\"(设置为默认值)>`显示的内容`</option>`\n- `</select>`  \n### 两个按钮\n##### 1.提交\n- `<input type=\"submit\" value=\"显示的内容(因为此按钮的作用是把上述的内容提交给服务器,就是起到一个确定的意思而已,所以值等于显示的内容即可)\"  name=\"后台识别\"/>`\n##### 2.重置\n- `<input type=\"reset\" value=\"显示的内容(因为此按钮的作用是重置上述的表单内容\"  name=\"后台识别\"/>`                                                                                                                 \n### label标签\n- `<label for=\"所关联控件的id值\">`显示的内容`</label>` \n每个表单都有个id,用于前端自己来识别的. \n# CSS开始                                   \n### 内联式\n- `<xx  style=\"语句\"></xx>`         \n### 嵌入式(一般在`<head>`标签的域内)\n- `<style type=\"text/css\">`\n`xx{\n    ...\n}`\n`</style>`\n### 外部式(写在`<head>`标签的域内的`<link>`标签中)\n- `<link href=\"目标css文件\" rel=\"stylesheet\" type=\"text/css\" />`\n## 进入大选择器时代\n#### 标签选择器\n- 标签名{\n    ...\n}\n#### 类选择器\n- 1.先创建一个css的类选择器(以'.'开头)\n.起名{\n    ...\n}\n- 2.在标签中使用\n例:`<span class=\"起的名字\">示例</span>`\n#### ID选择器\n- 1.创建一个ID选择器\n`# 目标ID名{\n\t...\n}`\n- 2.使用\n例:`<span  id=\"目标ID名\">示例</span>`\n#### 类和ID选择器的区别\n- 1.ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。\n- 2.可以使用类选择器词列表方法为一个元素同时设置多个样式。不能使用 ID 词列表(例:`<span class=\"stress setBig\">` 这是对的,但是`<span id=\"stressId setBigId\">` 这是错的)\n#### 子选择器\n- 1.创建子选择器\n. 父名(随意起名,也可以是一个标签) > 子标签名{\n\t...\n}\n- 2.使用\n例:`<p class=\"父名(类似于类选择器的扩展)\"><span>子<span>孙类</span>     类</span><span>子类</span>`\n- 3.注意\n只会作用于直接子类,孙子级或更深则不作用.\n#### 包含选择器(基本类似于子选择器,注意空格区别)(我认为可以理解为强化版的子选择器)\n- 1.创建包含选择器\n. 父类名 '空格' 子标签名{\n\t...\n}\n- 2.使用\n与子选择器类似,仅有一点区别:父类的所有子孙级全受到CSS效果的作用.\n#### 通用选择器\n- 作用:\n会匹配所有的html的标签.\n- 格式  \n`*{xx}`\n#### 伪类选择符\n- 格式\n`标签名:对标签的行为操作{CSS样式...;}`\n- 注意(目前只有下面的实例的兼容性最好,伪类选择符有很多...)\n例:`a:hover{\n\tcolor:red;\n\t...\n}`\n#### 分组选择符\n- 例1:\n `h1,span{CSS样式...}`相当于`h1{xx}   span{xx}`\n- 例2:  \n `.first,#second{}`\n#### 继承\n- 例:\n`p{xxx}`\n`<p><span></span></p>`\n- 特殊性(权值优先级问题)(当对同一内容做相同类型操作是就会涉及到权值比较)\n   ID选择符(最高100) > 类选择符(10) > 标签(1) > 继承(0.1)\n- 层叠(相同权值,相同类型)\n 1.后 > 前   (前面的被后面所覆盖)\n 2.内联式 > 入式 > 外部式\n#### 重要性(为低权值设置成高权值)\n- 格式:  \n`!important`\n- 例:\n`p{\n\tcolor:red !important;\n}\np{\n\tcolor:blue;\n}`\n显示的是红色.\n## 盒子模型\n### 盒子的边界(border)\n`p{\n\tborder:宽度 样式 颜色;\n}`\n`p{\n\tborder-width:thin/medium/thick/像素;\n\tborder-style:dashed/dotted/solid;\n\tborder-color:十六进制/英文;\n}`\n### 盒子的真实宽度/高度\n##### 真实宽度:\n- margin-left + border-left + padding-left + width + padding-right + border-right + margin-right\n##### 真实高度\n- 类似于真实宽度算法\n### 盒子的填充\n- 1.顺时针  上 右 下 左\n`p{\n\tpadding:20px 10px 15px 30px;\n}`\n- 2.设置上下  左右\n`p{\n\tpadding:20px 30px;\n}`\n- 3.若果四个方向都一样\n`p{\n\tpadding:10px;\n}`\n- 4.(left=right)\n`p{\n\tpadding:10px 20px 30px\n}`\n- 5.全写\n`p{\n\tpadding-top:;\n\txxx;\n\t...\n}`\n### 盒子的边界(margin)\n- 类似于盒子的填充写法\n### CSS布局模型\n#### 流动型(Flow)浏览器默认布局:\n 1.块级元素独占一行 \n 2.内联元素从左到右\n#### 浮动型(Float)适用于想让块级元素在同行显示的时候\n    设置:float:left/right;\n#### 层模型(Layer) \n##### 三个定位属性:    \n- position:absolute(绝对定位)/relative(相对定位)/fixed(固定定位)\n- 1.绝对定位   \n这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。\n- 2.相对定位   \n这条语句是在原来的位置上进行相对的移动,并且旧位置依然保留,其后的元素标签都不会迁移.\n- 3.固定定位   \n相对于视图,拖动滚动条位置不会改变.类似于网页上的小浮窗\n##### 绝对,相对定位结合(据父定子)\n- 1.参照定位必须是目标定位的父辈\n- 2.参照的父级必须是   `position:relative;`\n- 3.子级的定位必须是   `position:absolute;   (top:xx;   xxxx;)`\n### 长度单位\n当给 font-size 设置单位为 em (%同理)时，此时计算的标准以 p 的父元素的 font-size 为基础。\n如下...：\n`<p>以这个<span>例子</span>为例。</p>`\n`p{font-size:14px}`\n`span{font-size:0.8em;}`\n结果 span 中的字体“例子”字体大小就为 11.2px（14 * 0.8 = 11.2px）。","content":"<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><ul>\n<li><code>&lt;hr /&gt;</code> 添加一个分割横线</li>\n<li><code>&lt;pre&gt;</code> 添加预格式化的文本,如代码</li>\n<li><code>&lt;code&gt;</code> 一行</li>\n<li><code>&lt;br /&gt;</code> 换行</li>\n<li><code>&lt;hx&gt;</code>(x=1,2,3,4,5,6) 文本标题</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><code>&lt;q&gt;</code> 短文本引用</li>\n<li><code>&lt;blockquote&gt;</code> 长文本引用</li>\n<li><code>&lt;address&gt;</code>  地址(强调)</li>\n<li><code>&amp;nbsp;</code>  空格</li>\n<li><code>&lt;p&gt;</code> 段落</li>\n<li><code>&lt;ul&gt;</code> <code>&lt;li&gt;</code>  无序信息队列</li>\n<li><code>&lt;ol&gt;</code> <code>&lt;li&gt;</code>  有序信息队列</li>\n<li><code>&lt;div  id=&#39;&#39;xxx&#39;&#39;&gt;</code>  div相当于一个小隔间,一块小区域<h2 id=\"表格专属\"><a href=\"#表格专属\" class=\"headerlink\" title=\"表格专属\"></a>表格专属</h2></li>\n<li><code>&lt;caption&gt;</code>  为表格添加标题</li>\n<li><code>&lt;table   summary=&quot;摘要(不会显示在前台)&quot;&gt;&lt;/table&gt;</code> 代表一个表格</li>\n<li><code>&lt;tbody&gt;&lt;/tbody&gt;</code> 加了的话就会导致整个表格全加载才显示</li>\n<li><code>&lt;tr&gt;&lt;/tr&gt;</code>代表一行,有多少行就有多少对</li>\n<li><code>&lt;th&gt;&lt;/th&gt;</code>  表头的一个单元格</li>\n<li><code>&lt;td&gt;&lt;/td&gt;</code> 代表内容的一个单元格<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2></li>\n<li><code>&lt;a href=&quot;目标网址&quot; title=&quot;鼠标滑过显示的内容&quot; target=&quot;打开的方式&quot;&gt;</code>  超链接标签</li>\n<li><code>&lt;a href=&quot;mailto:yy@imooc.com ?cc=抄送地址&amp;bcc=密件抄送地址&amp;subject=主题名&amp;body=邮件内容&quot;&gt;</code> 超链接名<code>&lt;/a&gt;</code>(允许发送多人,用’;’间隔即可)<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2></li>\n<li><code>&lt;img src=&quot;目标图片的所在地址&quot; alt=&quot;图片加载失败是显示的文本&quot; title=&quot;鼠标滑过时的提示文本&quot;&gt;</code>     图片标签<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2></li>\n<li><code>&lt;form method=&quot;提交方式get/post&quot; action=&quot;提交服务器地址&quot;&gt;</code>    表单是用于交互的,内可以有多种标签.</li>\n<li><code>&lt;input type=&quot;text/password&quot; name=&quot;用于后端识别&quot; value=&quot;默认文本值&quot;/&gt;</code>          输入文本标签</li>\n<li><code>&lt;textarea rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;</code>默认值<code>&lt;/textarea&gt;</code>  大段文本输入域,就是一个大的输入框而已</li>\n<li><code>&lt;input type=&quot;radio/checkbox&quot; name=&quot;用于后台,若是单选,则name要相同&quot; value=&quot;返回给后台的值&quot; checked=&quot;checked(代表初始默认选中)/默认的不选&quot;/&gt;</code>    单选框及多选框<h3 id=\"浏览器的下拉列表框实现\"><a href=\"#浏览器的下拉列表框实现\" class=\"headerlink\" title=\"浏览器的下拉列表框实现\"></a>浏览器的下拉列表框实现</h3></li>\n<li><code>&lt;select  multiple=&quot;multiple(代表可以按下ctrl+单击来多选)&quot;&gt;</code><ul>\n<li><code>&lt;option value=&quot;提交给服务器的值&quot;&gt;</code> 显示的内容- <code>&lt;/option&gt;</code><br>….</li>\n<li><code>&lt;option value=&quot;提交给服务器的值&quot;  selected=&quot;selected&quot;(设置为默认值)&gt;</code>显示的内容<code>&lt;/option&gt;</code></li>\n</ul>\n</li>\n<li><code>&lt;/select&gt;</code>  <h3 id=\"两个按钮\"><a href=\"#两个按钮\" class=\"headerlink\" title=\"两个按钮\"></a>两个按钮</h3><h5 id=\"1-提交\"><a href=\"#1-提交\" class=\"headerlink\" title=\"1.提交\"></a>1.提交</h5></li>\n<li><code>&lt;input type=&quot;submit&quot; value=&quot;显示的内容(因为此按钮的作用是把上述的内容提交给服务器,就是起到一个确定的意思而已,所以值等于显示的内容即可)&quot;  name=&quot;后台识别&quot;/&gt;</code><h5 id=\"2-重置\"><a href=\"#2-重置\" class=\"headerlink\" title=\"2.重置\"></a>2.重置</h5></li>\n<li><code>&lt;input type=&quot;reset&quot; value=&quot;显示的内容(因为此按钮的作用是重置上述的表单内容&quot;  name=&quot;后台识别&quot;/&gt;</code>                                                                                                                 <h3 id=\"label标签\"><a href=\"#label标签\" class=\"headerlink\" title=\"label标签\"></a>label标签</h3></li>\n<li><code>&lt;label for=&quot;所关联控件的id值&quot;&gt;</code>显示的内容<code>&lt;/label&gt;</code><br>每个表单都有个id,用于前端自己来识别的. <h1 id=\"CSS开始\"><a href=\"#CSS开始\" class=\"headerlink\" title=\"CSS开始\"></a>CSS开始</h1><h3 id=\"内联式\"><a href=\"#内联式\" class=\"headerlink\" title=\"内联式\"></a>内联式</h3></li>\n<li><code>&lt;xx  style=&quot;语句&quot;&gt;&lt;/xx&gt;</code>         <h3 id=\"嵌入式-一般在-lt-head-gt-标签的域内\"><a href=\"#嵌入式-一般在-lt-head-gt-标签的域内\" class=\"headerlink\" title=\"嵌入式(一般在&lt;head&gt;标签的域内)\"></a>嵌入式(一般在<code>&lt;head&gt;</code>标签的域内)</h3></li>\n<li><code>&lt;style type=&quot;text/css&quot;&gt;</code><br><code>xx{\n  ...\n}</code><br><code>&lt;/style&gt;</code><h3 id=\"外部式-写在-lt-head-gt-标签的域内的-lt-link-gt-标签中\"><a href=\"#外部式-写在-lt-head-gt-标签的域内的-lt-link-gt-标签中\" class=\"headerlink\" title=\"外部式(写在&lt;head&gt;标签的域内的&lt;link&gt;标签中)\"></a>外部式(写在<code>&lt;head&gt;</code>标签的域内的<code>&lt;link&gt;</code>标签中)</h3></li>\n<li><code>&lt;link href=&quot;目标css文件&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code><h2 id=\"进入大选择器时代\"><a href=\"#进入大选择器时代\" class=\"headerlink\" title=\"进入大选择器时代\"></a>进入大选择器时代</h2><h4 id=\"标签选择器\"><a href=\"#标签选择器\" class=\"headerlink\" title=\"标签选择器\"></a>标签选择器</h4></li>\n<li>标签名{<br>  …<br>}<h4 id=\"类选择器\"><a href=\"#类选择器\" class=\"headerlink\" title=\"类选择器\"></a>类选择器</h4></li>\n<li>1.先创建一个css的类选择器(以’.’开头)<br>.起名{<br>  …<br>}</li>\n<li>2.在标签中使用<br>例:<code>&lt;span class=&quot;起的名字&quot;&gt;示例&lt;/span&gt;</code><h4 id=\"ID选择器\"><a href=\"#ID选择器\" class=\"headerlink\" title=\"ID选择器\"></a>ID选择器</h4></li>\n<li>1.创建一个ID选择器<br><code># 目标ID名{\n  ...\n}</code></li>\n<li>2.使用<br>例:<code>&lt;span  id=&quot;目标ID名&quot;&gt;示例&lt;/span&gt;</code><h4 id=\"类和ID选择器的区别\"><a href=\"#类和ID选择器的区别\" class=\"headerlink\" title=\"类和ID选择器的区别\"></a>类和ID选择器的区别</h4></li>\n<li>1.ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。</li>\n<li>2.可以使用类选择器词列表方法为一个元素同时设置多个样式。不能使用 ID 词列表(例:<code>&lt;span class=&quot;stress setBig&quot;&gt;</code> 这是对的,但是<code>&lt;span id=&quot;stressId setBigId&quot;&gt;</code> 这是错的)<h4 id=\"子选择器\"><a href=\"#子选择器\" class=\"headerlink\" title=\"子选择器\"></a>子选择器</h4></li>\n<li>1.创建子选择器<br>. 父名(随意起名,也可以是一个标签) &gt; 子标签名{<br>  …<br>}</li>\n<li>2.使用<br>例:<code>&lt;p class=&quot;父名(类似于类选择器的扩展)&quot;&gt;&lt;span&gt;子&lt;span&gt;孙类&lt;/span&gt;     类&lt;/span&gt;&lt;span&gt;子类&lt;/span&gt;</code></li>\n<li>3.注意<br>只会作用于直接子类,孙子级或更深则不作用.<h4 id=\"包含选择器-基本类似于子选择器-注意空格区别-我认为可以理解为强化版的子选择器\"><a href=\"#包含选择器-基本类似于子选择器-注意空格区别-我认为可以理解为强化版的子选择器\" class=\"headerlink\" title=\"包含选择器(基本类似于子选择器,注意空格区别)(我认为可以理解为强化版的子选择器)\"></a>包含选择器(基本类似于子选择器,注意空格区别)(我认为可以理解为强化版的子选择器)</h4></li>\n<li>1.创建包含选择器<br>. 父类名 ‘空格’ 子标签名{<br>  …<br>}</li>\n<li>2.使用<br>与子选择器类似,仅有一点区别:父类的所有子孙级全受到CSS效果的作用.<h4 id=\"通用选择器\"><a href=\"#通用选择器\" class=\"headerlink\" title=\"通用选择器\"></a>通用选择器</h4></li>\n<li>作用:<br>会匹配所有的html的标签.</li>\n<li>格式<br><code>*{xx}</code><h4 id=\"伪类选择符\"><a href=\"#伪类选择符\" class=\"headerlink\" title=\"伪类选择符\"></a>伪类选择符</h4></li>\n<li>格式<br><code>标签名:对标签的行为操作{CSS样式...;}</code></li>\n<li>注意(目前只有下面的实例的兼容性最好,伪类选择符有很多…)<br>例:<code>a:hover{\n  color:red;\n  ...\n}</code><h4 id=\"分组选择符\"><a href=\"#分组选择符\" class=\"headerlink\" title=\"分组选择符\"></a>分组选择符</h4></li>\n<li>例1:<br><code>h1,span{CSS样式...}</code>相当于<code>h1{xx}   span{xx}</code></li>\n<li>例2:<br><code>.first,#second{}</code><h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4></li>\n<li>例:<br><code>p{xxx}</code><br><code>&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;</code></li>\n<li>特殊性(权值优先级问题)(当对同一内容做相同类型操作是就会涉及到权值比较)<br> ID选择符(最高100) &gt; 类选择符(10) &gt; 标签(1) &gt; 继承(0.1)</li>\n<li>层叠(相同权值,相同类型)<br>1.后 &gt; 前   (前面的被后面所覆盖)<br>2.内联式 &gt; 入式 &gt; 外部式<h4 id=\"重要性-为低权值设置成高权值\"><a href=\"#重要性-为低权值设置成高权值\" class=\"headerlink\" title=\"重要性(为低权值设置成高权值)\"></a>重要性(为低权值设置成高权值)</h4></li>\n<li>格式:<br><code>!important</code></li>\n<li>例:<br><code>p{\n  color:red !important;\n}\np{\n  color:blue;\n}</code><br>显示的是红色.<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><h3 id=\"盒子的边界-border\"><a href=\"#盒子的边界-border\" class=\"headerlink\" title=\"盒子的边界(border)\"></a>盒子的边界(border)</h3><code>p{\n  border:宽度 样式 颜色;\n}</code><br><code>p{\n  border-width:thin/medium/thick/像素;\n  border-style:dashed/dotted/solid;\n  border-color:十六进制/英文;\n}</code><h3 id=\"盒子的真实宽度-高度\"><a href=\"#盒子的真实宽度-高度\" class=\"headerlink\" title=\"盒子的真实宽度/高度\"></a>盒子的真实宽度/高度</h3><h5 id=\"真实宽度\"><a href=\"#真实宽度\" class=\"headerlink\" title=\"真实宽度:\"></a>真实宽度:</h5></li>\n<li>margin-left + border-left + padding-left + width + padding-right + border-right + margin-right<h5 id=\"真实高度\"><a href=\"#真实高度\" class=\"headerlink\" title=\"真实高度\"></a>真实高度</h5></li>\n<li>类似于真实宽度算法<h3 id=\"盒子的填充\"><a href=\"#盒子的填充\" class=\"headerlink\" title=\"盒子的填充\"></a>盒子的填充</h3></li>\n<li>1.顺时针  上 右 下 左<br><code>p{\n  padding:20px 10px 15px 30px;\n}</code></li>\n<li>2.设置上下  左右<br><code>p{\n  padding:20px 30px;\n}</code></li>\n<li>3.若果四个方向都一样<br><code>p{\n  padding:10px;\n}</code></li>\n<li>4.(left=right)<br><code>p{\n  padding:10px 20px 30px\n}</code></li>\n<li>5.全写<br><code>p{\n  padding-top:;\n  xxx;\n  ...\n}</code><h3 id=\"盒子的边界-margin\"><a href=\"#盒子的边界-margin\" class=\"headerlink\" title=\"盒子的边界(margin)\"></a>盒子的边界(margin)</h3></li>\n<li>类似于盒子的填充写法<h3 id=\"CSS布局模型\"><a href=\"#CSS布局模型\" class=\"headerlink\" title=\"CSS布局模型\"></a>CSS布局模型</h3><h4 id=\"流动型-Flow-浏览器默认布局\"><a href=\"#流动型-Flow-浏览器默认布局\" class=\"headerlink\" title=\"流动型(Flow)浏览器默认布局:\"></a>流动型(Flow)浏览器默认布局:</h4>1.块级元素独占一行<br>2.内联元素从左到右<h4 id=\"浮动型-Float-适用于想让块级元素在同行显示的时候\"><a href=\"#浮动型-Float-适用于想让块级元素在同行显示的时候\" class=\"headerlink\" title=\"浮动型(Float)适用于想让块级元素在同行显示的时候\"></a>浮动型(Float)适用于想让块级元素在同行显示的时候</h4>  设置:float:left/right;<h4 id=\"层模型-Layer\"><a href=\"#层模型-Layer\" class=\"headerlink\" title=\"层模型(Layer)\"></a>层模型(Layer)</h4><h5 id=\"三个定位属性\"><a href=\"#三个定位属性\" class=\"headerlink\" title=\"三个定位属性:\"></a>三个定位属性:</h5></li>\n<li>position:absolute(绝对定位)/relative(相对定位)/fixed(固定定位)</li>\n<li>1.绝对定位<br>这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。</li>\n<li>2.相对定位<br>这条语句是在原来的位置上进行相对的移动,并且旧位置依然保留,其后的元素标签都不会迁移.</li>\n<li>3.固定定位<br>相对于视图,拖动滚动条位置不会改变.类似于网页上的小浮窗<h5 id=\"绝对-相对定位结合-据父定子\"><a href=\"#绝对-相对定位结合-据父定子\" class=\"headerlink\" title=\"绝对,相对定位结合(据父定子)\"></a>绝对,相对定位结合(据父定子)</h5></li>\n<li>1.参照定位必须是目标定位的父辈</li>\n<li>2.参照的父级必须是   <code>position:relative;</code></li>\n<li>3.子级的定位必须是   <code>position:absolute;   (top:xx;   xxxx;)</code><h3 id=\"长度单位\"><a href=\"#长度单位\" class=\"headerlink\" title=\"长度单位\"></a>长度单位</h3>当给 font-size 设置单位为 em (%同理)时，此时计算的标准以 p 的父元素的 font-size 为基础。<br>如下…：<br><code>&lt;p&gt;以这个&lt;span&gt;例子&lt;/span&gt;为例。&lt;/p&gt;</code><br><code>p{font-size:14px}</code><br><code>span{font-size:0.8em;}</code><br>结果 span 中的字体“例子”字体大小就为 11.2px（14 * 0.8 = 11.2px）。</li>\n</ul>\n","slug":"css记录","updated":"2017-07-12T06:17:56.777Z","comments":true,"link":"","permalink":"http://yoursite.com/2017/07/12/css记录/","excerpt":"基本 &lt;hr /&gt; 添加一个分割横线 &lt;pre&gt; 添加预格式化的文本,如代码 &lt;code&gt; 一行 &lt;br /&gt; 换行 &lt;hx&gt;(x=1,2,3,4,5,6) 文本标题","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/笔记/"},{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"tankWar","date":"2017-07-12T02:58:14.000Z","path":"2017/07/12/tankWar/","text":"简要介绍: 只是一个比较简陋的游戏,目前是初代版本,以后看心情更新吧. 游戏说明: 坦克大战分为两个阵营,绿队(奇数id号)和红队(偶数id号),开始,然后…就开打吧. 获取Demo 点击这里获取","raw":"---\nlayout: post\ntitle: tankWar\ndate: 2017-07-12 10:58:14\ncomments: true\ntags: \n\t- 开源小项目 \n\t- java\n---\n\n简要介绍:\n----------\n\n- 只是一个比较简陋的游戏,目前是初代版本,以后看心情更新吧.\n\n## 游戏说明:\n- 坦克大战分为两个阵营,绿队(奇数id号)和红队(偶数id号),开始,然后...就开打吧.\n\n### 获取Demo\n- 点击[这里](https://github.com/Simplehippo/tankWar/releases)获取","content":"<h2 id=\"简要介绍\"><a href=\"#简要介绍\" class=\"headerlink\" title=\"简要介绍:\"></a>简要介绍:</h2><ul>\n<li>只是一个比较简陋的游戏,目前是初代版本,以后看心情更新吧.</li>\n</ul>\n<h2 id=\"游戏说明\"><a href=\"#游戏说明\" class=\"headerlink\" title=\"游戏说明:\"></a>游戏说明:</h2><ul>\n<li>坦克大战分为两个阵营,绿队(奇数id号)和红队(偶数id号),开始,然后…就开打吧.</li>\n</ul>\n<h3 id=\"获取Demo\"><a href=\"#获取Demo\" class=\"headerlink\" title=\"获取Demo\"></a>获取Demo</h3><ul>\n<li>点击<a href=\"https://github.com/Simplehippo/tankWar/releases\" target=\"_blank\" rel=\"external\">这里</a>获取</li>\n</ul>\n","slug":"tankWar","updated":"2017-07-12T06:18:42.168Z","comments":true,"link":"","permalink":"http://yoursite.com/2017/07/12/tankWar/","excerpt":"","categories":[],"tags":[{"name":"开源小项目","slug":"开源小项目","permalink":"http://yoursite.com/tags/开源小项目/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]}]