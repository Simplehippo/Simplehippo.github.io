<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨育才的个人博客</title>
  <subtitle>java新手一枚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-12T09:11:54.762Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨育才</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java获取本机局域网IP</title>
    <link href="http://yoursite.com/2017/07/12/java%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E5%B1%80%E5%9F%9F%E7%BD%91IP/"/>
    <id>http://yoursite.com/2017/07/12/java获取本机局域网IP/</id>
    <published>2017-07-12T07:42:34.000Z</published>
    <updated>2017-07-12T09:11:54.762Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-java获取本机局域网IP的方法"><a href="#1-java获取本机局域网IP的方法" class="headerlink" title="1.java获取本机局域网IP的方法"></a>1.java获取本机局域网IP的方法</h3><h4 id="java的网络类可以获取本机IP，但是，获取的IP是本机的局域网IP，而不是公网IP。"><a href="#java的网络类可以获取本机IP，但是，获取的IP是本机的局域网IP，而不是公网IP。" class="headerlink" title="java的网络类可以获取本机IP，但是，获取的IP是本机的局域网IP，而不是公网IP。"></a>java的网络类可以获取本机IP，但是，获取的IP是本机的局域网IP，而不是公网IP。</h4><ul>
<li>例如：<ul>
<li>System.out.println(“my IP is: “+InetAddress.getLocalHost().getHostAddress());</li>
</ul>
</li>
<li>对于通过网关上网（如路由器设备），上述方法则是无效的。<br><a id="more"></a>
</li>
</ul>
<h3 id="2-获取公网IP的思路"><a href="#2-获取公网IP的思路" class="headerlink" title="2.获取公网IP的思路"></a>2.获取公网IP的思路</h3><ul>
<li>1.调用操作系统命令（如windows下的ipconfig /all)；(未验证)</li>
<li>2.访问公网资源，由公网中特定程序捕获IP。(可行但麻烦)</li>
</ul>
<h4 id="查询网站示例"><a href="#查询网站示例" class="headerlink" title="查询网站示例"></a>查询网站示例</h4><ul>
<li>IP查询：  <ul>
<li><a href="http://www.ip.cn/" target="_blank" rel="external">http://www.ip.cn/</a></li>
</ul>
</li>
</ul>
<h4 id="在java程序中"><a href="#在java程序中" class="headerlink" title="在java程序中"></a>在java程序中</h4><ul>
<li>第一步是访问上述网站，获取返回页面；</li>
<li>第二步是从返回信息中提取IP(正则)。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-java获取本机局域网IP的方法&quot;&gt;&lt;a href=&quot;#1-java获取本机局域网IP的方法&quot; class=&quot;headerlink&quot; title=&quot;1.java获取本机局域网IP的方法&quot;&gt;&lt;/a&gt;1.java获取本机局域网IP的方法&lt;/h3&gt;&lt;h4 id=&quot;java的网络类可以获取本机IP，但是，获取的IP是本机的局域网IP，而不是公网IP。&quot;&gt;&lt;a href=&quot;#java的网络类可以获取本机IP，但是，获取的IP是本机的局域网IP，而不是公网IP。&quot; class=&quot;headerlink&quot; title=&quot;java的网络类可以获取本机IP，但是，获取的IP是本机的局域网IP，而不是公网IP。&quot;&gt;&lt;/a&gt;java的网络类可以获取本机IP，但是，获取的IP是本机的局域网IP，而不是公网IP。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;例如：&lt;ul&gt;
&lt;li&gt;System.out.println(“my IP is: “+InetAddress.getLocalHost().getHostAddress());&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于通过网关上网（如路由器设备），上述方法则是无效的。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="net" scheme="http://yoursite.com/tags/net/"/>
    
      <category term="ip" scheme="http://yoursite.com/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>Mysql存储java对象</title>
    <link href="http://yoursite.com/2017/07/12/Mysql%E5%AD%98%E5%82%A8java%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/07/12/Mysql存储java对象/</id>
    <published>2017-07-12T07:38:48.000Z</published>
    <updated>2017-07-12T11:40:55.350Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MySQL-设置字段为-blob-java对象实现Serializable接口"><a href="#MySQL-设置字段为-blob-java对象实现Serializable接口" class="headerlink" title="MySQL 设置字段为 blob , java对象实现Serializable接口"></a>MySQL 设置字段为 blob , java对象实现Serializable接口</h4><ul>
<li>保存对象，先将对象序列化为byte[]</li>
<li>获取对象 使用getBytes()，将获取的byte[]反序列化为Java 对象<br><a id="more"></a></li>
</ul>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul>
<li><p>保存对象，先将对象序列化为byte[]</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();    </div><div class="line">ObjectOutputStream out = <span class="keyword">null</span>;     </div><div class="line"><span class="keyword">try</span> &#123;       </div><div class="line">    out = <span class="keyword">new</span> ObjectOutputStream(baos);       </div><div class="line">    out.writeObject(java实例对象);     </div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;       </div><div class="line">    logger.error(<span class="string">"msg2Bytes error!"</span>, e);     </div><div class="line">&#125;<span class="keyword">finally</span>&#123;       </div><div class="line">    <span class="keyword">try</span> &#123;         </div><div class="line">        out.close();       </div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;         </div><div class="line">        logger.error(<span class="string">"msg2Bytes error!"</span>, e);       </div><div class="line">    &#125;     </div><div class="line">&#125;          </div><div class="line"><span class="keyword">return</span> baos.toByteArray();</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>获取对象 使用getBytes()，将获取的byte[]反序列化为Java 对象</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ByteArrayInputStream bais;     </div><div class="line">ObjectInputStream in = <span class="keyword">null</span>;     </div><div class="line"><span class="keyword">try</span>&#123;       </div><div class="line">    bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);       </div><div class="line">    in = <span class="keyword">new</span> ObjectInputStream(bais);         </div><div class="line">    <span class="keyword">return</span> (java类)in.readObject();     </div><div class="line">&#125;<span class="keyword">finally</span>&#123;       </div><div class="line">    <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;         </div><div class="line">        <span class="keyword">try</span> &#123;           </div><div class="line">            in.close();         </div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;           </div><div class="line">            logger.error(<span class="string">"bytes2Msg error!"</span>, e);         </div><div class="line">        &#125;       </div><div class="line">    &#125;     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="网上的其他方式会有各类问题，慎用。"><a href="#网上的其他方式会有各类问题，慎用。" class="headerlink" title="网上的其他方式会有各类问题，慎用。"></a>网上的其他方式会有各类问题，慎用。</h3><h4 id="包括"><a href="#包括" class="headerlink" title="包括:"></a>包括:</h4><ul>
<li>1.设置url参数 <ul>
<li>autoDeserialize=true</li>
</ul>
</li>
<li>2.setObject(java实例对象)<ul>
<li>ObjectInputStream oips = new ObjectInputStrea(rs.getBinaryStream(1));  </li>
<li>ArrayList<string> obb = (java类)oips.readObject();//从流中读取对象 </string></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;MySQL-设置字段为-blob-java对象实现Serializable接口&quot;&gt;&lt;a href=&quot;#MySQL-设置字段为-blob-java对象实现Serializable接口&quot; class=&quot;headerlink&quot; title=&quot;MySQL 设置字段为 blob , java对象实现Serializable接口&quot;&gt;&lt;/a&gt;MySQL 设置字段为 blob , java对象实现Serializable接口&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;保存对象，先将对象序列化为byte[]&lt;/li&gt;
&lt;li&gt;获取对象 使用getBytes()，将获取的byte[]反序列化为Java 对象&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>junit初学记录</title>
    <link href="http://yoursite.com/2017/07/12/junit%E5%88%9D%E5%AD%A6%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/07/12/junit初学记录/</id>
    <published>2017-07-12T07:24:23.000Z</published>
    <updated>2017-07-12T11:41:16.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本注解-需要在开始的时候创建一个被测试类的实例"><a href="#基本注解-需要在开始的时候创建一个被测试类的实例" class="headerlink" title="基本注解(需要在开始的时候创建一个被测试类的实例)"></a>基本注解(需要在开始的时候创建一个被测试类的实例)</h2><h3 id="Test"><a href="#Test" class="headerlink" title="@Test"></a>@Test</h3><ul>
<li><p>测试的注解<br>有限制:方法必须返回void,并且方法不能有参数</p>
<h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展:"></a>扩展:</h5><h6 id="1-可以加入限时-限时2秒"><a href="#1-可以加入限时-限时2秒" class="headerlink" title="1.可以加入限时:限时2秒"></a>1.可以加入限时:限时2秒<br><a id="more"></a></h6><p>  @Test(timeout = 2000)   </p>
<h6 id="2-可以测试异常"><a href="#2-可以测试异常" class="headerlink" title="2.可以测试异常"></a>2.可以测试异常</h6>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>( expected = ArithmeticException.class)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDivide</span><span class="params">()</span> </span>&#123;</div><div class="line">	...</div><div class="line">	c.divide(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h3><ul>
<li>在所有的Test注解标志的单元测试之前执行<br>但是,除首次生成的@Before注解的方法外,<br>其他的@Before注解的方法是按照修改顺序反向执行,</li>
<li><p>例如:</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Before</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       System.out.println(<span class="string">"3"</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="meta">@Before</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       System.out.println(<span class="string">"1"</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="meta">@Before</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       System.out.println(<span class="string">"0"</span>);</div><div class="line">       c.clear();</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="meta">@Before</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       System.out.println(<span class="string">"2"</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>执行结果:   0 3 2 1</p>
</li>
</ul>
<h3 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h3><ul>
<li>在所有的Test注解标志的单元测试之后执行<br>顺序跟@Before反过来    1 2 3 0</li>
</ul>
<h3 id="BeforeClass"><a href="#BeforeClass" class="headerlink" title="@BeforeClass"></a>@BeforeClass</h3><ul>
<li>必须是   public static void xxx () {}   形式</li>
<li>在开始的时候执行一次<br>只会在最开始执行一次,也仅有一次</li>
</ul>
<h3 id="AfterClass"><a href="#AfterClass" class="headerlink" title="@AfterClass"></a>@AfterClass</h3><ul>
<li>必须是   public static void xxx () {}   形式</li>
<li>在所有的测试都结束的时候执行一次<br>只会在最后执行一次,也仅有一次</li>
</ul>
<h3 id="RunWith"><a href="#RunWith" class="headerlink" title="@RunWith"></a>@RunWith</h3><ul>
<li>使用在类上,作用于类中的所有方法</li>
<li><p>使用:</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span> (TestClassRunner.calss)</div><div class="line"><span class="meta">@RunWith</span> (xxx.class)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参数化测试-不多于三个就不用-最好写个模板"><a href="#参数化测试-不多于三个就不用-最好写个模板" class="headerlink" title="参数化测试:不多于三个就不用,最好写个模板"></a>参数化测试:不多于三个就不用,最好写个模板</h3><h4 id="具体做法"><a href="#具体做法" class="headerlink" title="具体做法:"></a>具体做法:</h4><ul>
<li>1.新建另一个测试类</li>
<li>2.运行器:Parameterized.class</li>
<li>3.增加两个参数:para,res(名字,顺序无所谓)</li>
<li>4.创建一个方法:<ul>
<li>1.用@Parameter注解修饰</li>
<li>2.public static Collection xx () {} 修饰</li>
<li>3.返回一个Collection,二维的数组(此时的参数顺序很重要)<ul>
<li>例如:({res,para})</li>
</ul>
</li>
</ul>
</li>
<li>5.写一个构造器:<ul>
<li>1.传入参数,顺序无所谓</li>
<li>2.初始化两个参数(顺序很重要,跟Collection里的数据顺序一致)</li>
</ul>
</li>
<li>6.写测试方法:(测试方法不能带参数,所以用成员变量)<ul>
<li>1.调用时,将para作为参数传递进去</li>
<li>2.将res作为预期结果</li>
</ul>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>@RunWith(Parameterized. class )
public   class  SquareTest  {
      private   static  Calculator calculator  =   new  Calculator();
      private   int  param;
      private   int  result;

       @Parameters
      public   static  Collection data()  {
          return  Arrays.asList( new  Object[][] {
                  { 2 ,  4 } ,
                  { 0 ,  0 } ,
                  {－ 3 ,  9 } ,
         } );
     } 

       // 构造函数，对变量进行初始化 
      public  SquareTest( int  param,  int  result)  {
          this .param  =  param;
          this .result  =  result;
     } 

     @Test
     public   void  square()  {
         calculator.square(param);
         assertEquals(result, calculator.getResult());
     }

 } 
</code></pre><h3 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试:"></a>打包测试:</h3><h4 id="具体做法-1"><a href="#具体做法-1" class="headerlink" title="具体做法:"></a>具体做法:</h4><ul>
<li>1.运行器:Suite.class<ul>
<li>@RunWith(Suite.class)</li>
</ul>
</li>
<li><p>2.打包的类作为参数传递进去,结尾不加’;’,这只是个注解</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Suite</span>.SuiteClasses( &#123;</div><div class="line">	xx.class</div><div class="line">&#125; )</div></pre></td></tr></table></figure>
</li>
<li><p>3.随便起个类名,内容为空即可<br>  public class xxx {}</p>
</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h4><pre><code>@RunWith(Suite. class ) 
@Suite.SuiteClasses( {
    CalculatorTest.class,
    SquareTest.class 
} )
public   class  AllCalculatorTests  {
} 
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本注解-需要在开始的时候创建一个被测试类的实例&quot;&gt;&lt;a href=&quot;#基本注解-需要在开始的时候创建一个被测试类的实例&quot; class=&quot;headerlink&quot; title=&quot;基本注解(需要在开始的时候创建一个被测试类的实例)&quot;&gt;&lt;/a&gt;基本注解(需要在开始的时候创建一个被测试类的实例)&lt;/h2&gt;&lt;h3 id=&quot;Test&quot;&gt;&lt;a href=&quot;#Test&quot; class=&quot;headerlink&quot; title=&quot;@Test&quot;&gt;&lt;/a&gt;@Test&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;测试的注解&lt;br&gt;有限制:方法必须返回void,并且方法不能有参数&lt;/p&gt;
&lt;h5 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展:&quot;&gt;&lt;/a&gt;扩展:&lt;/h5&gt;&lt;h6 id=&quot;1-可以加入限时-限时2秒&quot;&gt;&lt;a href=&quot;#1-可以加入限时-限时2秒&quot; class=&quot;headerlink&quot; title=&quot;1.可以加入限时:限时2秒&quot;&gt;&lt;/a&gt;1.可以加入限时:限时2秒&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="junit" scheme="http://yoursite.com/tags/junit/"/>
    
  </entry>
  
  <entry>
    <title>eclipse更改tab为空格</title>
    <link href="http://yoursite.com/2017/07/12/eclipse%E6%9B%B4%E6%94%B9tab%E4%B8%BA%E7%A9%BA%E6%A0%BC/"/>
    <id>http://yoursite.com/2017/07/12/eclipse更改tab为空格/</id>
    <published>2017-07-12T07:17:09.000Z</published>
    <updated>2017-07-12T08:07:01.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更改缩进"><a href="#更改缩进" class="headerlink" title="更改缩进"></a>更改缩进</h2><ul>
<li>1.Window ——&gt; Preferences…… ——&gt; Java ——&gt; Code Style ——&gt; Formatter</li>
<li>2.点右边的“Edit……”按钮，切换到第一个选项卡“Indentation”</li>
<li>3.在 General settings 组将 Tab policy 由 Table only 改为 Space only，同时把 Indentation size 和 Tab size 改为 4</li>
<li>4.最后把最上面的 Profile name 取一个名字，名字任意，再点 OK 按钮就可以了。<h4 id="以后按-Tab-键或者-Ctrl-Shift-F-会自动采用-4-个空格作为一个层次的缩进。"><a href="#以后按-Tab-键或者-Ctrl-Shift-F-会自动采用-4-个空格作为一个层次的缩进。" class="headerlink" title="以后按 Tab 键或者 Ctrl + Shift + F 会自动采用 4 个空格作为一个层次的缩进。"></a>以后按 Tab 键或者 Ctrl + Shift + F 会自动采用 4 个空格作为一个层次的缩进。</h4></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更改缩进&quot;&gt;&lt;a href=&quot;#更改缩进&quot; class=&quot;headerlink&quot; title=&quot;更改缩进&quot;&gt;&lt;/a&gt;更改缩进&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.Window ——&amp;gt; Preferences…… ——&amp;gt; Java ——&amp;gt; Code St
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git初级学习</title>
    <link href="http://yoursite.com/2017/07/12/git%E5%88%9D%E7%BA%A7%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/07/12/git初级学习/</id>
    <published>2017-07-12T06:26:03.000Z</published>
    <updated>2017-07-12T07:56:31.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非git-的命令"><a href="#非git-的命令" class="headerlink" title="非git 的命令"></a>非git 的命令</h2><ul>
<li>[mkdir 文件名]      创建一个文件夹</li>
<li>[cd]                 进入一个文件夹</li>
<li>[cat]                 查看文件内容</li>
<li>[pwd]                查看当前路径</li>
<li>[rm]                删除文件<br><a id="more"></a></li>
<li>[rmdir]                删除空的文件夹</li>
</ul>
<h2 id="git-的命令"><a href="#git-的命令" class="headerlink" title="git 的命令"></a>git 的命令</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>[$ git init]                 初始化一个git仓库</li>
</ul>
<h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><ul>
<li>[$ git status]                显示所有文件的状态</li>
<li>[$ git add  文件名]          把文件加到暂存区</li>
<li>[$ git commit -m “描述”]       把暂存区的内容提交</li>
<li>[$ git diff 文件名]            只会显示工作区文件内容的改变,如果加到暂存区了,就不会显示内容了</li>
<li>[$ git log]                    显示文件的提交日志</li>
<li>[$ git log –pretty=oneline]    在一行里显示文件的提交日志</li>
<li>[$ git reflog]                        显示当前仓库的提交和回退操作指令日志</li>
<li>[$ git log –graph –pretty=oneline –abbrev-commit]            看提交的结构</li>
</ul>
<h3 id="2-版本回退"><a href="#2-版本回退" class="headerlink" title="2.版本回退"></a>2.版本回退</h3><ul>
<li>[$ git reset –hard HEAD^]        版本回退到上一个版本</li>
<li>[$ git reset –hard HEAD~n]        版本回退到第前n个版本</li>
<li>[$ git reset –hard 版本commit id]    版本回退到指定的commit id号对应的版本</li>
<li>[$ git checkout – <file>]             (注意:–很重要,必加.否则就成了改变分支)把工作区的文件内容修改全部取消,回退到最近的commit|add状态</file></li>
<li>[$ git reset <head|head^|head~n> &lt;文件名&gt;]         把暂存区的指定的修改给移除</head|head^|head~n></li>
<li>[$ git rm <file>]                                删除版本库里的文件,并且会把工作区的文件也删除</file></li>
</ul>
<h3 id="3-与远程库建立连接"><a href="#3-与远程库建立连接" class="headerlink" title="3.与远程库建立连接"></a>3.与远程库建立连接</h3><ul>
<li>[$ git remote add &lt;自定义远程库名&gt; git@github.com:用户名/库名.git]        创建一个远程库连接点</li>
<li>[$ git remote add &lt;自定义远程库名&gt; <a href="https://github.com/用户名/库名.git" target="_blank" rel="external">https://github.com/用户名/库名.git</a>]    创建一个远程库连接点,但每次都需要输账号密码</li>
<li>[$ git remote -v]                                显示较详细远程信息</li>
<li>[$ git remote]                                    显示简短的远程信息</li>
</ul>
<h3 id="4-推送到远程库"><a href="#4-推送到远程库" class="headerlink" title="4.推送到远程库"></a>4.推送到远程库</h3><ul>
<li>[$ git push -u &lt;自定义远程库名&gt; 远程库的分支名]                                    把修改提交到远程服务器,第一次加一个-u参数</li>
<li>[$ git push &lt;自定义远程库名&gt; 远程库的分支名]                                    把修改提交到远程服务器的对应分支</li>
</ul>
<h3 id="5-从远程库拉取"><a href="#5-从远程库拉取" class="headerlink" title="5.从远程库拉取"></a>5.从远程库拉取</h3><ul>
<li>[$ git pull –rebase &lt;自定义的远程库名&gt; &lt;分支名&gt;]                        从远程库里拉取内容</li>
<li>[$ git pull]                            在已建立流桥梁的情况下,可以拉取远程的最新库</li>
</ul>
<h3 id="6-从远程库克隆"><a href="#6-从远程库克隆" class="headerlink" title="6.从远程库克隆"></a>6.从远程库克隆</h3><ul>
<li>[$ git clone git@github.com:用户名/库名.git]                            从远程库克隆</li>
</ul>
<h3 id="7-分支操作"><a href="#7-分支操作" class="headerlink" title="7.分支操作"></a>7.分支操作</h3><ul>
<li>[$ git branch]                                查看所有分支,当前分支前有一个*号</li>
<li>[$ git branch &lt;分支名&gt;]                        创建一个新的分支                    </li>
<li>[$ git branch -d &lt;分支名&gt;]                    删除一个分支</li>
<li>[$ git branch -D &lt;分支名&gt;]                        强制删除分支</li>
<li>[$ git branch –set-upstream 当前分支名 origin/&lt;远程分支名&gt;]        在当前分支和远程分支之间建立一个流桥梁</li>
<li>[$ git checkout &lt;分支名&gt;]                    转换分支,就是转换HEAD指针的指向</li>
<li>[$ git checkout -b &lt;分支名&gt;]                创建一个新的分支并指向此分支</li>
<li>[$ git merge &lt;分支名&gt;]                        在当前HEAD指向的分支里合并指定分支</li>
<li>[$ git merge –no-ff -m “描述” &lt;分支名&gt;]                        融合分支但是不是快进模式,就是说显示分支的结构</li>
</ul>
<h3 id="8-工作环境的存储与回复"><a href="#8-工作环境的存储与回复" class="headerlink" title="8.工作环境的存储与回复"></a>8.工作环境的存储与回复</h3><ul>
<li>[$ git stash]                                                    会把当前的工作环境存储起来</li>
<li>[$ git stash list]                                                查看已经存储的环境</li>
<li>[$ git stash apply &lt;存储的工作环境序号&gt;]                        会把指定的工作环境恢复,同时还会比较冲突,但不会删除序号</li>
<li>[$ git stash pop &lt;存储的工作环境序号&gt;]                            会把指定的工作环境恢复,同时还会比较冲突,同时删除序号    </li>
</ul>
<h3 id="9-tag标签定义版本"><a href="#9-tag标签定义版本" class="headerlink" title="9.tag标签定义版本"></a>9.tag标签定义版本</h3><ul>
<li>[$ git tag <tag名> &lt;默认commit是HEAD&gt;]            在当前最近的一次提交下建立一个标签</tag名></li>
<li>[$ git tag <tag名> commitId]                    在指定的提交位置建立一个标签</tag名></li>
<li>[$ git tag -a <tag名> -m “描述” commitId]        在指定的提交位置建立一个标签,并加上描述信息和名字</tag名></li>
<li>[$ git tag -s <tag名> -m “描述” commitId]        在指定的提交位置建立一个标签,并加上描述信息和名字,但是用PGP签名标签</tag名></li>
<li>[$ git tag]                       查看所有tag信息</li>
<li>[git show <tagname>]                查看指定tag信息</tagname></li>
<li>[$ git push origin <tag名>]                        把指定标签推送到远程</tag名></li>
<li>[$ git push origin –tags]                        把未提交的标签全部推送到远程</li>
<li>[$ git tag -d <tag名>]                            删除标签</tag名></li>
<li>[$ git push origin :refs/tags/<tag名>]            在远程删除一个标签,注:必须先在本地删除标签</tag名></li>
<li>[$ git add -f &lt;文件名&gt;]                            强行加入一个被忽视的文件到暂存区</li>
</ul>
<h3 id="10-自定义git-原来的仍然可用"><a href="#10-自定义git-原来的仍然可用" class="headerlink" title="10.自定义git(原来的仍然可用)"></a>10.自定义git(原来的仍然可用)</h3><ul>
<li>[$ git config –global alias.&lt;指令的代替名&gt; 被代替的指令]     简化一个指令,相当于加了一个快捷键,原来的依然能用</li>
<li>[$ git config –global color.ui true]  让git显示颜色</li>
<li>[$ git config –global alias.st status] 将status配置出另一名字st[$git st] </li>
<li>[$ git config –global alias.co checkout] 将checkout配置出另一名字co[$git co]</li>
<li>[$ git config –global alias.ci commit] 将commit配置出另一名字ci[$git ci]</li>
<li>[$ git config –global alias.br branch] 将branch配置出另一名字br[$git br]</li>
<li>[$ git config –global alias.last ‘log -1’] 为最后一次提交配置 last[$git last]</li>
<li>[git config –global alias.lg “log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”] 丧心病狂…[$git lg]</li>
<li>配置的别名在C:\Users\Administrator\.gitconfig中可查看(win7)</li>
</ul>
<h2 id="忽视文件需要"><a href="#忽视文件需要" class="headerlink" title="忽视文件需要:"></a>忽视文件需要:</h2><ul>
<li>1.在工作区根路径下创建一个.gitignore的文件,内容是要忽略的文件特征(后缀)</li>
<li>2.提交到版本库中</li>
</ul>
<h2 id="本文的-…-无特殊含义-只是为了美观"><a href="#本文的-…-无特殊含义-只是为了美观" class="headerlink" title="本文的[…]无特殊含义,只是为了美观"></a>本文的[…]无特殊含义,只是为了美观</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;非git-的命令&quot;&gt;&lt;a href=&quot;#非git-的命令&quot; class=&quot;headerlink&quot; title=&quot;非git 的命令&quot;&gt;&lt;/a&gt;非git 的命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[mkdir 文件名]      创建一个文件夹&lt;/li&gt;
&lt;li&gt;[cd]                 进入一个文件夹&lt;/li&gt;
&lt;li&gt;[cat]                 查看文件内容&lt;/li&gt;
&lt;li&gt;[pwd]                查看当前路径&lt;/li&gt;
&lt;li&gt;[rm]                删除文件&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>css初学记录</title>
    <link href="http://yoursite.com/2017/07/12/css%E5%88%9D%E5%AD%A6%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/07/12/css初学记录/</id>
    <published>2017-07-12T02:58:14.000Z</published>
    <updated>2017-07-12T07:56:24.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ul>
<li><code>&lt;hr /&gt;</code> 添加一个分割横线</li>
<li><code>&lt;pre&gt;</code> 添加预格式化的文本,如代码</li>
<li><code>&lt;code&gt;</code> 一行</li>
<li><code>&lt;br /&gt;</code> 换行</li>
<li><code>&lt;hx&gt;</code>(x=1,2,3,4,5,6) 文本标题</li>
</ul>
<a id="more"></a>
<ul>
<li><code>&lt;q&gt;</code> 短文本引用</li>
<li><code>&lt;blockquote&gt;</code> 长文本引用</li>
<li><code>&lt;address&gt;</code>  地址(强调)</li>
<li><code>&amp;nbsp;</code>  空格</li>
<li><code>&lt;p&gt;</code> 段落</li>
<li><code>&lt;ul&gt;</code> <code>&lt;li&gt;</code>  无序信息队列</li>
<li><code>&lt;ol&gt;</code> <code>&lt;li&gt;</code>  有序信息队列</li>
<li><code>&lt;div  id=&#39;&#39;xxx&#39;&#39;&gt;</code>  div相当于一个小隔间,一块小区域<h2 id="表格专属"><a href="#表格专属" class="headerlink" title="表格专属"></a>表格专属</h2></li>
<li><code>&lt;caption&gt;</code>  为表格添加标题</li>
<li><code>&lt;table   summary=&quot;摘要(不会显示在前台)&quot;&gt;&lt;/table&gt;</code> 代表一个表格</li>
<li><code>&lt;tbody&gt;&lt;/tbody&gt;</code> 加了的话就会导致整个表格全加载才显示</li>
<li><code>&lt;tr&gt;&lt;/tr&gt;</code>代表一行,有多少行就有多少对</li>
<li><code>&lt;th&gt;&lt;/th&gt;</code>  表头的一个单元格</li>
<li><code>&lt;td&gt;&lt;/td&gt;</code> 代表内容的一个单元格<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2></li>
<li><code>&lt;a href=&quot;目标网址&quot; title=&quot;鼠标滑过显示的内容&quot; target=&quot;打开的方式&quot;&gt;</code>  超链接标签</li>
<li><code>&lt;a href=&quot;mailto:yy@imooc.com ?cc=抄送地址&amp;bcc=密件抄送地址&amp;subject=主题名&amp;body=邮件内容&quot;&gt;</code> 超链接名<code>&lt;/a&gt;</code>(允许发送多人,用’;’间隔即可)<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2></li>
<li><code>&lt;img src=&quot;目标图片的所在地址&quot; alt=&quot;图片加载失败是显示的文本&quot; title=&quot;鼠标滑过时的提示文本&quot;&gt;</code>     图片标签<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2></li>
<li><code>&lt;form method=&quot;提交方式get/post&quot; action=&quot;提交服务器地址&quot;&gt;</code>    表单是用于交互的,内可以有多种标签.</li>
<li><code>&lt;input type=&quot;text/password&quot; name=&quot;用于后端识别&quot; value=&quot;默认文本值&quot;/&gt;</code>          输入文本标签</li>
<li><code>&lt;textarea rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;</code>默认值<code>&lt;/textarea&gt;</code>  大段文本输入域,就是一个大的输入框而已</li>
<li><code>&lt;input type=&quot;radio/checkbox&quot; name=&quot;用于后台,若是单选,则name要相同&quot; value=&quot;返回给后台的值&quot; checked=&quot;checked(代表初始默认选中)/默认的不选&quot;/&gt;</code>    单选框及多选框<h3 id="浏览器的下拉列表框实现"><a href="#浏览器的下拉列表框实现" class="headerlink" title="浏览器的下拉列表框实现"></a>浏览器的下拉列表框实现</h3></li>
<li><code>&lt;select  multiple=&quot;multiple(代表可以按下ctrl+单击来多选)&quot;&gt;</code><ul>
<li><code>&lt;option value=&quot;提交给服务器的值&quot;&gt;</code> 显示的内容- <code>&lt;/option&gt;</code><br>….</li>
<li><code>&lt;option value=&quot;提交给服务器的值&quot;  selected=&quot;selected&quot;(设置为默认值)&gt;</code>显示的内容<code>&lt;/option&gt;</code></li>
</ul>
</li>
<li><code>&lt;/select&gt;</code>  <h3 id="两个按钮"><a href="#两个按钮" class="headerlink" title="两个按钮"></a>两个按钮</h3><h5 id="1-提交"><a href="#1-提交" class="headerlink" title="1.提交"></a>1.提交</h5></li>
<li><code>&lt;input type=&quot;submit&quot; value=&quot;显示的内容(因为此按钮的作用是把上述的内容提交给服务器,就是起到一个确定的意思而已,所以值等于显示的内容即可)&quot;  name=&quot;后台识别&quot;/&gt;</code><h5 id="2-重置"><a href="#2-重置" class="headerlink" title="2.重置"></a>2.重置</h5></li>
<li><code>&lt;input type=&quot;reset&quot; value=&quot;显示的内容(因为此按钮的作用是重置上述的表单内容&quot;  name=&quot;后台识别&quot;/&gt;</code>                                                                                                                 <h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3></li>
<li><code>&lt;label for=&quot;所关联控件的id值&quot;&gt;</code>显示的内容<code>&lt;/label&gt;</code><br>每个表单都有个id,用于前端自己来识别的. <h1 id="CSS开始"><a href="#CSS开始" class="headerlink" title="CSS开始"></a>CSS开始</h1><h3 id="内联式"><a href="#内联式" class="headerlink" title="内联式"></a>内联式</h3></li>
<li><code>&lt;xx  style=&quot;语句&quot;&gt;&lt;/xx&gt;</code>         <h3 id="嵌入式-一般在-lt-head-gt-标签的域内"><a href="#嵌入式-一般在-lt-head-gt-标签的域内" class="headerlink" title="嵌入式(一般在&lt;head&gt;标签的域内)"></a>嵌入式(一般在<code>&lt;head&gt;</code>标签的域内)</h3></li>
<li><code>&lt;style type=&quot;text/css&quot;&gt;</code><br><code>xx{
  ...
}</code><br><code>&lt;/style&gt;</code><h3 id="外部式-写在-lt-head-gt-标签的域内的-lt-link-gt-标签中"><a href="#外部式-写在-lt-head-gt-标签的域内的-lt-link-gt-标签中" class="headerlink" title="外部式(写在&lt;head&gt;标签的域内的&lt;link&gt;标签中)"></a>外部式(写在<code>&lt;head&gt;</code>标签的域内的<code>&lt;link&gt;</code>标签中)</h3></li>
<li><code>&lt;link href=&quot;目标css文件&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code><h2 id="进入大选择器时代"><a href="#进入大选择器时代" class="headerlink" title="进入大选择器时代"></a>进入大选择器时代</h2><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4></li>
<li>标签名{<br>  …<br>}<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4></li>
<li>1.先创建一个css的类选择器(以’.’开头)<br>.起名{<br>  …<br>}</li>
<li>2.在标签中使用<br>例:<code>&lt;span class=&quot;起的名字&quot;&gt;示例&lt;/span&gt;</code><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4></li>
<li>1.创建一个ID选择器<br><code># 目标ID名{
  ...
}</code></li>
<li>2.使用<br>例:<code>&lt;span  id=&quot;目标ID名&quot;&gt;示例&lt;/span&gt;</code><h4 id="类和ID选择器的区别"><a href="#类和ID选择器的区别" class="headerlink" title="类和ID选择器的区别"></a>类和ID选择器的区别</h4></li>
<li>1.ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。</li>
<li>2.可以使用类选择器词列表方法为一个元素同时设置多个样式。不能使用 ID 词列表(例:<code>&lt;span class=&quot;stress setBig&quot;&gt;</code> 这是对的,但是<code>&lt;span id=&quot;stressId setBigId&quot;&gt;</code> 这是错的)<h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4></li>
<li>1.创建子选择器<br>. 父名(随意起名,也可以是一个标签) &gt; 子标签名{<br>  …<br>}</li>
<li>2.使用<br>例:<code>&lt;p class=&quot;父名(类似于类选择器的扩展)&quot;&gt;&lt;span&gt;子&lt;span&gt;孙类&lt;/span&gt;     类&lt;/span&gt;&lt;span&gt;子类&lt;/span&gt;</code></li>
<li>3.注意<br>只会作用于直接子类,孙子级或更深则不作用.<h4 id="包含选择器-基本类似于子选择器-注意空格区别-我认为可以理解为强化版的子选择器"><a href="#包含选择器-基本类似于子选择器-注意空格区别-我认为可以理解为强化版的子选择器" class="headerlink" title="包含选择器(基本类似于子选择器,注意空格区别)(我认为可以理解为强化版的子选择器)"></a>包含选择器(基本类似于子选择器,注意空格区别)(我认为可以理解为强化版的子选择器)</h4></li>
<li>1.创建包含选择器<br>. 父类名 ‘空格’ 子标签名{<br>  …<br>}</li>
<li>2.使用<br>与子选择器类似,仅有一点区别:父类的所有子孙级全受到CSS效果的作用.<h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4></li>
<li>作用:<br>会匹配所有的html的标签.</li>
<li>格式<br><code>*{xx}</code><h4 id="伪类选择符"><a href="#伪类选择符" class="headerlink" title="伪类选择符"></a>伪类选择符</h4></li>
<li>格式<br><code>标签名:对标签的行为操作{CSS样式...;}</code></li>
<li>注意(目前只有下面的实例的兼容性最好,伪类选择符有很多…)<br>例:<code>a:hover{
  color:red;
  ...
}</code><h4 id="分组选择符"><a href="#分组选择符" class="headerlink" title="分组选择符"></a>分组选择符</h4></li>
<li>例1:<br><code>h1,span{CSS样式...}</code>相当于<code>h1{xx}   span{xx}</code></li>
<li>例2:<br><code>.first,#second{}</code><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4></li>
<li>例:<br><code>p{xxx}</code><br><code>&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;</code></li>
<li>特殊性(权值优先级问题)(当对同一内容做相同类型操作是就会涉及到权值比较)<br> ID选择符(最高100) &gt; 类选择符(10) &gt; 标签(1) &gt; 继承(0.1)</li>
<li>层叠(相同权值,相同类型)<br>1.后 &gt; 前   (前面的被后面所覆盖)<br>2.内联式 &gt; 入式 &gt; 外部式<h4 id="重要性-为低权值设置成高权值"><a href="#重要性-为低权值设置成高权值" class="headerlink" title="重要性(为低权值设置成高权值)"></a>重要性(为低权值设置成高权值)</h4></li>
<li>格式:<br><code>!important</code></li>
<li>例:<br><code>p{
  color:red !important;
}
p{
  color:blue;
}</code><br>显示的是红色.<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="盒子的边界-border"><a href="#盒子的边界-border" class="headerlink" title="盒子的边界(border)"></a>盒子的边界(border)</h3><code>p{
  border:宽度 样式 颜色;
}</code><br><code>p{
  border-width:thin/medium/thick/像素;
  border-style:dashed/dotted/solid;
  border-color:十六进制/英文;
}</code><h3 id="盒子的真实宽度-高度"><a href="#盒子的真实宽度-高度" class="headerlink" title="盒子的真实宽度/高度"></a>盒子的真实宽度/高度</h3><h5 id="真实宽度"><a href="#真实宽度" class="headerlink" title="真实宽度:"></a>真实宽度:</h5></li>
<li>margin-left + border-left + padding-left + width + padding-right + border-right + margin-right<h5 id="真实高度"><a href="#真实高度" class="headerlink" title="真实高度"></a>真实高度</h5></li>
<li>类似于真实宽度算法<h3 id="盒子的填充"><a href="#盒子的填充" class="headerlink" title="盒子的填充"></a>盒子的填充</h3></li>
<li>1.顺时针  上 右 下 左<br><code>p{
  padding:20px 10px 15px 30px;
}</code></li>
<li>2.设置上下  左右<br><code>p{
  padding:20px 30px;
}</code></li>
<li>3.若果四个方向都一样<br><code>p{
  padding:10px;
}</code></li>
<li>4.(left=right)<br><code>p{
  padding:10px 20px 30px
}</code></li>
<li>5.全写<br><code>p{
  padding-top:;
  xxx;
  ...
}</code><h3 id="盒子的边界-margin"><a href="#盒子的边界-margin" class="headerlink" title="盒子的边界(margin)"></a>盒子的边界(margin)</h3></li>
<li>类似于盒子的填充写法<h3 id="CSS布局模型"><a href="#CSS布局模型" class="headerlink" title="CSS布局模型"></a>CSS布局模型</h3><h4 id="流动型-Flow-浏览器默认布局"><a href="#流动型-Flow-浏览器默认布局" class="headerlink" title="流动型(Flow)浏览器默认布局:"></a>流动型(Flow)浏览器默认布局:</h4>1.块级元素独占一行<br>2.内联元素从左到右<h4 id="浮动型-Float-适用于想让块级元素在同行显示的时候"><a href="#浮动型-Float-适用于想让块级元素在同行显示的时候" class="headerlink" title="浮动型(Float)适用于想让块级元素在同行显示的时候"></a>浮动型(Float)适用于想让块级元素在同行显示的时候</h4>  设置:float:left/right;<h4 id="层模型-Layer"><a href="#层模型-Layer" class="headerlink" title="层模型(Layer)"></a>层模型(Layer)</h4><h5 id="三个定位属性"><a href="#三个定位属性" class="headerlink" title="三个定位属性:"></a>三个定位属性:</h5></li>
<li>position:absolute(绝对定位)/relative(相对定位)/fixed(固定定位)</li>
<li>1.绝对定位<br>这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。</li>
<li>2.相对定位<br>这条语句是在原来的位置上进行相对的移动,并且旧位置依然保留,其后的元素标签都不会迁移.</li>
<li>3.固定定位<br>相对于视图,拖动滚动条位置不会改变.类似于网页上的小浮窗<h5 id="绝对-相对定位结合-据父定子"><a href="#绝对-相对定位结合-据父定子" class="headerlink" title="绝对,相对定位结合(据父定子)"></a>绝对,相对定位结合(据父定子)</h5></li>
<li>1.参照定位必须是目标定位的父辈</li>
<li>2.参照的父级必须是   <code>position:relative;</code></li>
<li>3.子级的定位必须是   <code>position:absolute;   (top:xx;   xxxx;)</code><h3 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h3>当给 font-size 设置单位为 em (%同理)时，此时计算的标准以 p 的父元素的 font-size 为基础。<br>如下…：<br><code>&lt;p&gt;以这个&lt;span&gt;例子&lt;/span&gt;为例。&lt;/p&gt;</code><br><code>p{font-size:14px}</code><br><code>span{font-size:0.8em;}</code><br>结果 span 中的字体“例子”字体大小就为 11.2px（14 * 0.8 = 11.2px）。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; title=&quot;基本&quot;&gt;&lt;/a&gt;基本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;hr /&amp;gt;&lt;/code&gt; 添加一个分割横线&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 添加预格式化的文本,如代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;hx&amp;gt;&lt;/code&gt;(x=1,2,3,4,5,6) 文本标题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>tankWar</title>
    <link href="http://yoursite.com/2017/07/12/tankWar/"/>
    <id>http://yoursite.com/2017/07/12/tankWar/</id>
    <published>2017-07-12T02:58:14.000Z</published>
    <updated>2017-07-12T09:11:03.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍:"></a>简要介绍:</h2><ul>
<li>只是一个比较简陋的游戏,目前是初代版本,以后看心情更新吧.</li>
</ul>
<h2 id="游戏说明"><a href="#游戏说明" class="headerlink" title="游戏说明:"></a>游戏说明:</h2><ul>
<li>坦克大战分为两个阵营,绿队(奇数id号)和红队(偶数id号),开始,然后…就开打吧.</li>
</ul>
<h3 id="获取Demo"><a href="#获取Demo" class="headerlink" title="获取Demo"></a>获取Demo</h3><ul>
<li>点击<a href="https://github.com/Simplehippo/tankWar/releases" target="_blank" rel="external">这里</a>获取</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简要介绍&quot;&gt;&lt;a href=&quot;#简要介绍&quot; class=&quot;headerlink&quot; title=&quot;简要介绍:&quot;&gt;&lt;/a&gt;简要介绍:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;只是一个比较简陋的游戏,目前是初代版本,以后看心情更新吧.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;游戏说明&quot;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="开源小项目" scheme="http://yoursite.com/tags/%E5%BC%80%E6%BA%90%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hello Blog</title>
    <link href="http://yoursite.com/2017/07/12/Hello%20Blog/"/>
    <id>http://yoursite.com/2017/07/12/Hello Blog/</id>
    <published>2017-07-12T02:55:14.000Z</published>
    <updated>2017-07-12T09:25:43.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开心"><a href="#开心" class="headerlink" title="开心"></a>开心</h3><ul>
<li>终于有机会写博客了</li>
<li>感谢github的免费服务器</li>
<li>十分感谢hexo开源框架</li>
<li>十分感谢litten大神的开源主题</li>
</ul>
<h3 id="前进"><a href="#前进" class="headerlink" title="前进"></a>前进</h3><ul>
<li>前进的路上布满荆棘</li>
<li>未来的世界更加残酷</li>
<li>从现在开始,加油</li>
</ul>
<h3 id="开始写"><a href="#开始写" class="headerlink" title="开始写"></a>开始写</h3><ul>
<li>感想</li>
<li>技术知识</li>
<li>笔记</li>
<li>解决方案</li>
<li>开源项目</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开心&quot;&gt;&lt;a href=&quot;#开心&quot; class=&quot;headerlink&quot; title=&quot;开心&quot;&gt;&lt;/a&gt;开心&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;终于有机会写博客了&lt;/li&gt;
&lt;li&gt;感谢github的免费服务器&lt;/li&gt;
&lt;li&gt;十分感谢hexo开源框架&lt;/li&gt;
&lt;li
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
